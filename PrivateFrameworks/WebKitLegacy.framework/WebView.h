/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class WebViewPrivate, DOMCSSStyleDeclaration, WebBackForwardList, WebScriptObject, NSString, DOMDocument, NSUndoManager, DOMRange, WAKWindow, WebPreferences, NSData, WebFrame;

@interface WebView : WAKView  {
    WebViewPrivate *_private;
}

@property(readonly) DOMRange * selectedDOMRange;
@property(readonly) int selectionAffinity;
@property(readonly) bool maintainsInactiveSelection;
@property(getter=isEditable) bool editable;
@property(retain) DOMCSSStyleDeclaration * typingStyle;
@property bool smartInsertDeleteEnabled;
@property(getter=isContinuousSpellCheckingEnabled) bool continuousSpellCheckingEnabled;
@property(readonly) NSUndoManager * undoManager;
@property(retain) id editingDelegate;
@property(readonly) bool canGoBack;
@property(readonly) bool canGoForward;
@property(readonly) bool canMakeTextLarger;
@property(readonly) bool canMakeTextSmaller;
@property(readonly) bool canMakeTextStandardSize;
@property(getter=_sourceApplicationAuditData,setter=_setSourceApplicationAuditData:,copy) NSData * sourceApplicationAuditData;
@property bool shouldCloseWithWindow;
@property id UIDelegate;
@property id resourceLoadDelegate;
@property id downloadDelegate;
@property id frameLoadDelegate;
@property id policyDelegate;
@property(readonly) WebFrame * mainFrame;
@property(readonly) WebFrame * selectedFrame;
@property(readonly) WebBackForwardList * backForwardList;
@property float textSizeMultiplier;
@property(copy) NSString * applicationNameForUserAgent;
@property(copy) NSString * customUserAgent;
@property(readonly) bool supportsTextEncoding;
@property(copy) NSString * customTextEncodingName;
@property(copy) NSString * mediaStyle;
@property(readonly) WebScriptObject * windowScriptObject;
@property(retain) WebPreferences * preferences;
@property(copy) NSString * preferencesIdentifier;
@property(retain) WAKWindow * hostWindow;
@property(copy) NSString * groupName;
@property(readonly) double estimatedProgress;
@property(getter=isLoading,readonly) bool loading;
@property bool drawsBackground;
@property bool shouldUpdateWhileOffscreen;
@property(copy) NSString * mainFrameURL;
@property(readonly) DOMDocument * mainFrameDocument;
@property(copy,readonly) NSString * mainFrameTitle;

+ (void)registerURLSchemeAsLocal:(id)arg1;
+ (void)setMIMETypesShownAsHTML:(id)arg1;
+ (id)MIMETypesShownAsHTML;
+ (bool)_canShowMIMEType:(id)arg1 allowingPlugins:(bool)arg2;
+ (void)registerViewClass:(Class)arg1 representationClass:(Class)arg2 forMIMEType:(id)arg3;
+ (bool)canShowMIMETypeAsHTML:(id)arg1;
+ (void)initialize;
+ (bool)canShowMIMEType:(id)arg1;
+ (void)_makeAllWebViewsPerformSelector:(SEL)arg1;
+ (void)_addOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(bool)arg4;
+ (void)_reportException:(struct OpaqueJSValue { }*)arg1 inContext:(struct OpaqueJSContext { }*)arg2;
+ (void)_setTileCacheLayerPoolCapacity:(unsigned int)arg1;
+ (void)_setHTTPPipeliningEnabled:(bool)arg1;
+ (bool)_HTTPPipeliningEnabled;
+ (void)_setLoadResourcesSerially:(bool)arg1;
+ (void)_registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsAllowingLocalStorageAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsSecure:(id)arg1;
+ (void)_setDomainRelaxationForbidden:(bool)arg1 forURLScheme:(id)arg2;
+ (void)_removeAllUserContentFromGroup:(id)arg1;
+ (void)_removeUserScriptsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_removeUserStyleSheetFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_removeUserScriptFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7;
+ (void)_resetOriginAccessWhitelists;
+ (void)_removeOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(bool)arg4;
+ (bool)_shouldUseFontSmoothing;
+ (void)_setShouldUseFontSmoothing:(bool)arg1;
+ (id)_decodeData:(id)arg1;
+ (void)_registerViewClass:(Class)arg1 representationClass:(Class)arg2 forURLScheme:(id)arg3;
+ (bool)_hasRemoteInspectorSession;
+ (bool)_isRemoteInspectorEnabled;
+ (void)_disableAutoStartRemoteInspector;
+ (void)_disableRemoteInspector;
+ (void)_enableRemoteInspector;
+ (bool)_shouldWaitForMemoryClearMessage;
+ (void)_clearMemoryPressure;
+ (bool)_isUnderMemoryPressure;
+ (bool)_allowCookies;
+ (void)_setAllowCookies:(bool)arg1;
+ (bool)canShowFile:(id)arg1;
+ (void)closeAllWebViews;
+ (bool)canCloseAllWebViews;
+ (bool)_allowsRoundingHacks;
+ (void)_setAlwaysUsesComplexTextCodePath:(bool)arg1;
+ (void)willEnterBackgroundWithCompletionHandler:(id)arg1;
+ (void)_clearPrivateBrowsingSessionCookieStorage;
+ (id)_supportedMIMETypes;
+ (id)_standardUserAgentWithApplicationName:(id)arg1;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7 injectedFrames:(int)arg8;
+ (id)_MIMETypeForFile:(id)arg1;
+ (void)_unregisterViewClassAndRepresentationClassForMIMEType:(id)arg1;
+ (void)releaseFastMallocMemoryOnCurrentThread;
+ (void)drainLayerPool;
+ (void)garbageCollectNow;
+ (void)discardAllCompiledCode;
+ (void)_handleMemoryWarning;
+ (void)_releaseMemoryNow;
+ (void)registerForMemoryNotifications;
+ (void)_setAllowsRoundingHacks:(bool)arg1;
+ (void)enableWebThread;
+ (void)_unregisterPluginMIMEType:(id)arg1;
+ (void)_registerPluginMIMEType:(id)arg1;
+ (id)_generatedMIMETypeForURLScheme:(id)arg1;
+ (bool)_representationExistsForURLScheme:(id)arg1;
+ (bool)_canHandleRequest:(id)arg1 forMainFrame:(bool)arg2;
+ (bool)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3 allowingPlugins:(bool)arg4;
+ (void)purgeInactiveFontData;
+ (bool)isCharacterSmartReplaceExempt:(unsigned short)arg1 isPreviousCharacter:(bool)arg2;
+ (bool)_canHandleRequest:(id)arg1;
+ (void)_doNotStartObservingNetworkReachability;
+ (id)_productivityDocumentMIMETypes;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6;
+ (void)_removeUserStyleSheetsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectedFrames:(int)arg7;
+ (void)_preflightSpellCheckerNow:(id)arg1;
+ (unsigned long long)_maxCacheModelInAnyInstance;
+ (bool)_didSetCacheModel;
+ (void)_preflightSpellChecker;
+ (void)_preferencesRemovedNotification:(id)arg1;
+ (void)_cacheModelChangedNotification:(id)arg1;
+ (void)_setCacheModel:(unsigned long long)arg1;
+ (unsigned long long)_cacheModel;
+ (bool)shouldIncludeInWebKitStatistics;
+ (Class)_getPDFViewClass;
+ (Class)_getPDFRepresentationClass;
+ (void)_setPDFViewClass:(Class)arg1;
+ (void)_setPDFRepresentationClass:(Class)arg1;

- (id)UIDelegate;
- (id)resourceLoadDelegate;
- (id)policyDelegate;
- (id)frameLoadDelegate;
- (id)windowScriptObject;
- (id)mainFrameTitle;
- (void)setShouldUpdateWhileOffscreen:(bool)arg1;
- (id)mainFrameIconURL;
- (void)setMainFrameURL:(id)arg1;
- (id)documentViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)hostWindow;
- (id)userAgentForURL:(id)arg1;
- (void)setCustomTextEncodingName:(id)arg1;
- (void)setMediaStyle:(id)arg1;
- (void)_resetZoom:(id)arg1 isTextOnly:(bool)arg2;
- (bool)_canResetZoom:(bool)arg1;
- (void)_zoomIn:(id)arg1 isTextOnly:(bool)arg2;
- (void)_zoomOut:(id)arg1 isTextOnly:(bool)arg2;
- (bool)_canZoomIn:(bool)arg1;
- (bool)_canZoomOut:(bool)arg1;
- (void)setPreferencesIdentifier:(id)arg1;
- (bool)shouldCloseWithWindow;
- (void)setShouldCloseWithWindow:(bool)arg1;
- (id)_initWithArguments:(id)arg1;
- (bool)_isMIMETypeRegisteredAsPlugin:(id)arg1;
- (id)_elementAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_mainFrameOverrideEncoding;
- (id)customTextEncodingName;
- (float)_zoomMultiplier:(bool)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (id)currentNodeHighlight;
- (id)preferencesIdentifier;
- (void)setHostWindow:(id)arg1;
- (void)setMaintainsBackForwardList:(bool)arg1;
- (void)_wakWindowVisibilityChanged:(id)arg1;
- (void)_wakWindowScreenScaleChanged:(id)arg1;
- (void)_updateScreenScaleFromWindow;
- (void)setCurrentNodeHighlight:(id)arg1;
- (bool)searchFor:(id)arg1 direction:(bool)arg2 caseSensitive:(bool)arg3 wrap:(bool)arg4;
- (id)_webcore_effectiveFirstResponder;
- (id)mediaStyle;
- (id)_pluginForMIMEType:(id)arg1;
- (id)_pluginForExtension:(id)arg1;
- (struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; })_userAgentString;
- (bool)shouldUpdateWhileOffscreen;
- (void)_setZoomMultiplier:(float)arg1 isTextOnly:(bool)arg2;
- (bool)_realZoomMultiplierIsTextOnly;
- (float)_realZoomMultiplier;
- (id)downloadDelegate;
- (id)_resourceLoadDelegateForwarder;
- (id)_frameLoadDelegateForwarder;
- (bool)_canShowMIMEType:(id)arg1;
- (id)previousValidKeyView;
- (void)setNextKeyView:(id)arg1;
- (void)finalize;
- (bool)acceptsFirstResponder;
- (float)textSizeMultiplier;
- (void)setTextSizeMultiplier:(float)arg1;
- (void)setDownloadDelegate:(id)arg1;
- (id)mainFrameDocument;
- (void)setApplicationNameForUserAgent:(id)arg1;
- (id)applicationNameForUserAgent;
- (bool)supportsTextEncoding;
- (double)estimatedProgress;
- (id)elementAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)drawsBackground;
- (bool)goForward;
- (bool)goBack;
- (id)customUserAgent;
- (bool)goToBackForwardItem:(id)arg1;
- (id)mainFrameURL;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (void)setResourceLoadDelegate:(id)arg1;
- (void)setUIDelegate:(id)arg1;
- (void)setFrameLoadDelegate:(id)arg1;
- (bool)isLoading;
- (id)preferences;
- (id)backForwardList;
- (id)groupName;
- (id)selectedFrame;
- (void)close;
- (void)viewDidMoveToWindow;
- (id)mainFrame;
- (void)setDrawsBackground:(bool)arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setPolicyDelegate:(id)arg1;
- (void)setPreferences:(id)arg1;
- (void)setGroupName:(id)arg1;
- (bool)becomeFirstResponder;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_addToAllWebViewsSet;
- (void)_removeFromAllWebViewsSet;
- (int)_visibilityState;
- (id)_displayURL;
- (void)_setSourceApplicationAuditData:(id)arg1;
- (void)_setWebGLEnabled:(bool)arg1;
- (bool)_webGLEnabled;
- (bool)_wantsTelephoneNumberParsing;
- (unsigned long long)countMatchesForText:(id)arg1 caseSensitive:(bool)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4 markMatches:(bool)arg5;
- (unsigned long long)markAllMatchesForText:(id)arg1 caseSensitive:(bool)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4;
- (void)_setVisibilityState:(int)arg1 isInitialState:(bool)arg2;
- (unsigned long long)_layoutMilestones;
- (void)_listenForLayoutMilestones:(unsigned long long)arg1;
- (void)_setUseFixedLayout:(bool)arg1;
- (float)_viewScaleFactor;
- (void)_scaleWebView:(float)arg1 atOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)setCSSAnimationsSuspended:(bool)arg1;
- (bool)cssAnimationsSuspended;
- (void)setAllowsNewCSSAnimationsWhileSuspended:(bool)arg1;
- (bool)allowsNewCSSAnimationsWhileSuspended;
- (void)_updateActiveState;
- (void)_updateVisibilityState;
- (id)trackedRepaintRects;
- (void)resetTrackedRepaints;
- (bool)isTrackingRepaints;
- (void)setTracksRepaints:(bool)arg1;
- (void)_setIncludesFlattenedCompositingLayersWhenDrawingToBitmap:(bool)arg1;
- (bool)_isSoftwareRenderable;
- (void)setValidationMessageTimerMagnification:(int)arg1;
- (void)setInteractiveFormValidationEnabled:(bool)arg1;
- (void)_setBaseCTM:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 forContext:(struct CGContext { }*)arg2;
- (void)_setPostsAcceleratedCompositingNotifications:(bool)arg1;
- (bool)_postsAcceleratedCompositingNotifications;
- (bool)areMemoryCacheDelegateCallsEnabled;
- (void)setMemoryCacheDelegateCallsEnabled:(bool)arg1;
- (bool)isSelectTrailingWhitespaceEnabled;
- (void)setSelectTrailingWhitespaceEnabled:(bool)arg1;
- (void)_clearMainFrameName;
- (void)_executeCoreCommandByName:(id)arg1 value:(id)arg2;
- (id)textIteratorForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_globalHistoryItem;
- (void)_setAllowsMessaging:(bool)arg1;
- (void)_detachScriptDebuggerFromAllFrames;
- (void)_attachScriptDebuggerToAllFrames;
- (void)_setNeedsUnrestrictedGetMatchedCSSRules:(bool)arg1;
- (void)_clearBackForwardCache;
- (void)_destroyAllPlugIns;
- (void)_setCookieEnabled:(bool)arg1;
- (bool)_cookieEnabled;
- (bool)_inFastImageScalingMode;
- (void)_setUseFastImageScalingMode:(bool)arg1;
- (void)removeCaretChangeListener:(id)arg1;
- (void)addCaretChangeListener:(id)arg1;
- (id)caretChangeListeners;
- (id)caretChangeListener;
- (void)_cacheHistoryDelegateImplementations;
- (void)_cacheScriptDebugDelegateImplementations;
- (void)_cacheFrameLoadDelegateImplementations;
- (void)_cacheResourceLoadDelegateImplementations;
- (id)_formDelegateForwarder;
- (void)_loadBackForwardListFromOtherView:(id)arg1;
- (void)setAllowsRemoteInspection:(bool)arg1;
- (bool)allowsRemoteInspection;
- (id)_openNewWindowWithRequest:(id)arg1;
- (void)_setResourceLoadSchedulerSuspended:(bool)arg1;
- (id)styleAtSelectionStart;
- (void)_dispatchUnloadEvent;
- (bool)_isClosed;
- (bool)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3;
- (void)_replaceCurrentHistoryItem:(id)arg1;
- (void)_viewWillDrawInternal;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (void)_dispatchPendingLoadRequests;
- (void)_setBrowserUserAgentProductVersion:(id)arg1 buildVersion:(id)arg2 bundleVersion:(id)arg3;
- (void)_synchronizeCustomFixedPositionLayoutRect;
- (void)_locked_recursivelyPerformPlugInSelector:(SEL)arg1 inFrame:(id)arg2;
- (bool)_locked_plugInsAreRunningInFrame:(id)arg1;
- (void)removeAllCaretChangeListeners;
- (void)caretChanged;
- (int)validationMessageTimerMagnification;
- (bool)interactiveFormValidationEnabled;
- (bool)_needsPreHTML5ParserQuirks;
- (void)_closeWithFastTeardown;
- (void)_closePluginDatabases;
- (void)_commonInitializationWithFrameName:(id)arg1 groupName:(id)arg2;
- (void)_preferencesChanged:(id)arg1;
- (void)_preferencesChangedNotification:(id)arg1;
- (bool)_isViewVisible;
- (bool)_fetchCustomFixedPositionLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (bool)_isStopping;
- (bool)_useFixedLayout;
- (bool)_isPerformingProgrammaticFocus;
- (bool)searchFor:(id)arg1 direction:(bool)arg2 caseSensitive:(bool)arg3 wrap:(bool)arg4 startInSelection:(bool)arg5;
- (bool)_isUsingAcceleratedCompositing;
- (void)_documentScaleChanged;
- (id)_sourceApplicationAuditData;
- (void)_restorePlugInsFromCache;
- (void)_stopAllPlugInsForPageCache;
- (void)_setGlobalHistoryItem:(struct HistoryItem { unsigned int x1; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_2_1_1; } x2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_3_1_1; } x3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_4_1_1; } x4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_5_1_1; } x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntPoint { int x_9_1_1; int x_9_1_2; } x9; float x10; struct Vector<WTF::String, 0, WTF::CrashOnOverflow> { struct String {} *x_11_1_1; unsigned int x_11_1_2; unsigned int x_11_1_3; } x11; struct Vector<WTF::RefPtr<WebCore::HistoryItem>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebCore::HistoryItem> {} *x_12_1_1; unsigned int x_12_1_2; unsigned int x_12_1_3; } x12; boolx13; boolx14; struct unique_ptr<WTF::Vector<WTF::String, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WTF::String, 0, WTF::CrashOnOverflow> > > { struct __compressed_pair<WTF::Vector<WTF::String, 0, WTF::CrashOnOverflow> *, std::__1::default_delete<WTF::Vector<WTF::String, 0, WTF::CrashOnOverflow> > > { struct Vector<WTF::String, 0, WTF::CrashOnOverflow> {} *x_1_2_1; } x_15_1_1; } x15; long long x16; long long x17; struct RefPtr<WebCore::SerializedScriptValue> { struct SerializedScriptValue {} *x_18_1_1; } x18; struct RefPtr<WebCore::FormData> { struct FormData {} *x_19_1_1; } x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; struct HistoryItem {} *x21; struct HistoryItem {} *x22; struct unique_ptr<WebCore::CachedPage, std::__1::default_delete<WebCore::CachedPage> > { struct __compressed_pair<WebCore::CachedPage *, std::__1::default_delete<WebCore::CachedPage> > { struct CachedPage {} *x_1_2_1; } x_23_1_1; } x23; struct FloatRect { struct FloatPoint { float x_1_2_1; float x_1_2_2; } x_24_1_1; struct FloatSize { float x_2_2_1; float x_2_2_2; } x_24_1_2; } x24; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_25_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_25_1_2; } x25; struct FloatSize { float x_26_1_1; float x_26_1_2; } x26; struct IntSize { int x_27_1_1; int x_27_1_2; } x27; float x28; boolx29; struct ViewportArguments { int x_30_1_1; float x_30_1_2; float x_30_1_3; float x_30_1_4; float x_30_1_5; float x_30_1_6; float x_30_1_7; float x_30_1_8; float x_30_1_9; float x_30_1_10; float x_30_1_11; float x_30_1_12; boolx_30_1_13; } x30; unsigned int x31; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_32_1_1; } x32; struct RetainPtr<id> { void *x_33_1_1; } x33; struct unique_ptr<WTF::HashMap<WTF::String, WTF::RetainPtr<id>, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RetainPtr<id> > >, std::__1::default_delete<WTF::HashMap<WTF::String, WTF::RetainPtr<id>, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RetainPtr<id> > > > > { struct __compressed_pair<WTF::HashMap<WTF::String, WTF::RetainPtr<id>, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RetainPtr<id> > > *, std::__1::default_delete<WTF::HashMap<WTF::String, WTF::RetainPtr<id>, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RetainPtr<id> > > > > { struct HashMap<WTF::String, WTF::RetainPtr<id>, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RetainPtr<id> > > {} *x_1_2_1; } x_34_1_1; } x34; }*)arg1;
- (id)_downloadURL:(id)arg1;
- (id)_policyDelegateForwarder;
- (void)_didCommitLoadForFrame:(id)arg1;
- (void)_startAllPlugIns;
- (void)_stopAllPlugIns;
- (bool)_includesFlattenedCompositingLayersWhenDrawingToBitmap;
- (bool)_isClosing;
- (id)_editingDelegateForwarder;
- (id)_formDelegateForSelector:(SEL)arg1;
- (id)_UIDelegateForSelector:(SEL)arg1;
- (void)_popPerformingProgrammaticFocus;
- (void)_pushPerformingProgrammaticFocus;
- (void)_mouseDidMoveOverElement:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (void)_closeWindow;
- (id)_UIKitDelegateForwarder;
- (bool)_allowsMessaging;
- (id)_UIDelegateForwarder;
- (bool)usesPageCache;
- (void)_didFinishScrollingOrZooming;
- (void)_willStartScrollingOrZooming;
- (void)_dispatchTileDidDraw:(id)arg1;
- (id)quickLookContentForURL:(id)arg1;
- (void)setUsesPageCache:(bool)arg1;
- (void)_setIsVisible:(bool)arg1;
- (void)_close;
- (void)setShowingInspectorIndication:(bool)arg1;
- (void)_setHostApplicationProcessIdentifier:(int)arg1 auditToken:(struct { unsigned int x1[8]; })arg2;
- (void)setDefersCallbacks:(bool)arg1;
- (bool)defersCallbacks;
- (id)_touchEventRegions;
- (void)_overflowScrollPositionChangedTo:(struct CGPoint { double x1; double x2; })arg1 forNode:(id)arg2 isUserScroll:(bool)arg3;
- (void)_setUIWebViewUserAgentWithBuildVersion:(id)arg1;
- (void)_setFormDelegate:(id)arg1;
- (struct Page { struct HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_1_1_1; } x1; struct unique_ptr<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair> > >, std::__1::default_delete<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair> > > > > { struct __compressed_pair<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair> > > *, std::__1::default_delete<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair> > > > > { struct HashSet<WTF::RefPtr<WTF::SchedulePair>, WTF::SchedulePairHash, WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair> > > {} *x_1_2_1; } x_2_1_1; } x2; struct unique_ptr<WebCore::Chrome, std::__1::default_delete<WebCore::Chrome> > { struct __compressed_pair<WebCore::Chrome *, std::__1::default_delete<WebCore::Chrome> > { struct Chrome {} *x_1_2_1; } x_3_1_1; } x3; struct unique_ptr<WebCore::DragCaretController, std::__1::default_delete<WebCore::DragCaretController> > { struct __compressed_pair<WebCore::DragCaretController *, std::__1::default_delete<WebCore::DragCaretController> > { struct DragCaretController {} *x_1_2_1; } x_4_1_1; } x4; struct unique_ptr<WebCore::FocusController, std::__1::default_delete<WebCore::FocusController> > { struct __compressed_pair<WebCore::FocusController *, std::__1::default_delete<WebCore::FocusController> > { struct FocusController {} *x_1_2_1; } x_5_1_1; } x5; struct unique_ptr<WebCore::UserInputBridge, std::__1::default_delete<WebCore::UserInputBridge> > { struct __compressed_pair<WebCore::UserInputBridge *, std::__1::default_delete<WebCore::UserInputBridge> > { struct UserInputBridge {} *x_1_2_1; } x_6_1_1; } x6; struct unique_ptr<WebCore::InspectorController, std::__1::default_delete<WebCore::InspectorController> > { struct __compressed_pair<WebCore::InspectorController *, std::__1::default_delete<WebCore::InspectorController> > { struct InspectorController {} *x_1_2_1; } x_7_1_1; } x7; struct RefPtr<WebCore::ScrollingCoordinator> { struct ScrollingCoordinator {} *x_8_1_1; } x8; struct RefPtr<WebCore::Settings> { struct Settings {} *x_9_1_1; } x9; struct unique_ptr<WebCore::ProgressTracker, std::__1::default_delete<WebCore::ProgressTracker> > { struct __compressed_pair<WebCore::ProgressTracker *, std::__1::default_delete<WebCore::ProgressTracker> > { struct ProgressTracker {} *x_1_2_1; } x_10_1_1; } x10; struct unique_ptr<WebCore::BackForwardController, std::__1::default_delete<WebCore::BackForwardController> > { struct __compressed_pair<WebCore::BackForwardController *, std::__1::default_delete<WebCore::BackForwardController> > { struct BackForwardController {} *x_1_2_1; } x_11_1_1; } x11; struct RefPtr<WebCore::MainFrame> { struct MainFrame {} *x_12_1_1; } x12; struct RefPtr<WebCore::PluginData> { struct PluginData {} *x_13_1_1; } x13; struct RefPtr<WebCore::RenderTheme> { struct RenderTheme {} *x_14_1_1; } x14; struct EditorClient {} *x15; struct PlugInClient {} *x16; struct ValidationMessageClient {} *x17; int x18; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_19_1_1; } x19; boolx20; boolx21; boolx22; unsigned int x23; boolx24; boolx25; float x26; float x27; float x28; float x29; float x30; float x31; boolx32; unsigned int x33 : 2; unsigned int x34 : 2; struct Pagination { int x_35_1_1; boolx_35_1_2; unsigned int x_35_1_3; unsigned int x_35_1_4; } x35; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_36_1_1; } x36; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_37_1_1; } x37; boolx38; long long x39; struct unique_ptr<WebCore::PageGroup, std::__1::default_delete<WebCore::PageGroup> > { struct __compressed_pair<WebCore::PageGroup *, std::__1::default_delete<WebCore::PageGroup> > { struct PageGroup {} *x_1_2_1; } x_40_1_1; } x40; struct PageGroup {} *x41; struct Debugger {} *x42; boolx43; struct RefPtr<WebCore::StorageNamespace> { struct StorageNamespace {} *x_44_1_1; } x44; double x45; boolx46; double x47; boolx48; boolx49; unsigned int x50; unsigned int x51; int x52; int x53; struct HashSet<WebCore::RenderObject *, WTF::PtrHash<WebCore::RenderObject *>, WTF::HashTraits<WebCore::RenderObject *> > { struct HashTable<WebCore::RenderObject *, WebCore::RenderObject *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::RenderObject *>, WTF::HashTraits<WebCore::RenderObject *>, WTF::HashTraits<WebCore::RenderObject *> > { struct RenderObject {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_54_1_1; } x54; struct Region { struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_1_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_1_2_2; } x_55_1_1; struct Shape { struct Vector<int, 32, WTF::CrashOnOverflow> { int *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; struct type { unsigned char x_4_4_1[4]; } x_1_3_4[32]; } x_2_2_1; struct Vector<WebCore::Region::Span, 16, WTF::CrashOnOverflow> { struct Span {} *x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; struct type { unsigned char x_4_4_1[16]; } x_2_3_4[16]; } x_2_2_2; } x_55_1_2; } x55; struct Region { struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_1_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_1_2_2; } x_56_1_1; struct Shape { struct Vector<int, 32, WTF::CrashOnOverflow> { int *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; struct type { unsigned char x_4_4_1[4]; } x_1_3_4[32]; } x_2_2_1; struct Vector<WebCore::Region::Span, 16, WTF::CrashOnOverflow> { struct Span {} *x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; struct type { unsigned char x_4_4_1[16]; } x_2_3_4[16]; } x_2_2_2; } x_56_1_2; } x56; struct Region { struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_1_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_1_2_2; } x_57_1_1; struct Shape { struct Vector<int, 32, WTF::CrashOnOverflow> { int *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; struct type { unsigned char x_4_4_1[4]; } x_1_3_4[32]; } x_2_2_1; struct Vector<WebCore::Region::Span, 16, WTF::CrashOnOverflow> { struct Span {} *x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; struct type { unsigned char x_4_4_1[16]; } x_2_3_4[16]; } x_2_2_2; } x_57_1_2; } x57; boolx58; struct AlternativeTextClient {} *x59; boolx60; struct unique_ptr<WebCore::PageThrottler, std::__1::default_delete<WebCore::PageThrottler> > { struct __compressed_pair<WebCore::PageThrottler *, std::__1::default_delete<WebCore::PageThrottler> > { struct PageThrottler {} *x_1_2_1; } x_61_1_1; } x61; struct unique_ptr<WebCore::PageConsole, std::__1::default_delete<WebCore::PageConsole> > { struct __compressed_pair<WebCore::PageConsole *, std::__1::default_delete<WebCore::PageConsole> > { struct PageConsole {} *x_1_2_1; } x_62_1_1; } x62; struct unique_ptr<WebCore::PageDebuggable, std::__1::default_delete<WebCore::PageDebuggable> > { struct __compressed_pair<WebCore::PageDebuggable *, std::__1::default_delete<WebCore::PageDebuggable> > { struct PageDebuggable {} *x_1_2_1; } x_63_1_1; } x63; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_64_1_1; } x64; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_65_1_1; } x65; unsigned int x66; unsigned int x67; struct RefPtr<WebCore::UserContentController> { struct UserContentController {} *x_68_1_1; } x68; struct RefPtr<WebCore::VisitedLinkStore> { struct VisitedLinkStore {} *x_69_1_1; } x69; struct HashSet<WebCore::ViewStateChangeObserver *, WTF::PtrHash<WebCore::ViewStateChangeObserver *>, WTF::HashTraits<WebCore::ViewStateChangeObserver *> > { struct HashTable<WebCore::ViewStateChangeObserver *, WebCore::ViewStateChangeObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::ViewStateChangeObserver *>, WTF::HashTraits<WebCore::ViewStateChangeObserver *>, WTF::HashTraits<WebCore::ViewStateChangeObserver *> > { struct ViewStateChangeObserver {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_70_1_1; } x70; struct SessionID { unsigned long long x_71_1_1; } x71; boolx72; }*)page;
- (unsigned long long)_pageCount;
- (void)_setGapBetweenPages:(double)arg1;
- (double)_gapBetweenPages;
- (void)_setPageLength:(double)arg1;
- (double)_pageLength;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (bool)_paginationBehavesLikeColumns;
- (void)_setPaginationMode:(int)arg1;
- (int)_paginationMode;
- (void)_setFontFallbackPrefersPictographs:(bool)arg1;
- (id)_formDelegate;
- (id)_UIKitDelegate;
- (bool)_pluginsAreRunning;
- (void)setCaretChangeListener:(id)arg1;
- (id)_fixedPositionContent;
- (void)_setCustomFixedPositionLayoutRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setCustomFixedPositionLayoutRectInWebThread:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 synchronize:(bool)arg2;
- (void)_viewGeometryDidChange;
- (bool)_isProcessingUserGesture;
- (unsigned long long)_renderTreeSize;
- (void)_setWantsTelephoneNumberParsing:(bool)arg1;
- (void)_clearDelegates;
- (id)inspector;
- (void)_setUIKitDelegate:(id)arg1;
- (bool)_setMediaLayer:(id)arg1 forPluginView:(id)arg2;
- (struct CGSize { double x1; double x2; })_fixedLayoutSize;
- (void)_setFixedLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initSimpleHTMLDocumentWithStyle:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 preferences:(id)arg3 groupName:(id)arg4;
- (struct CGColor { }*)backgroundColor;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)updateLayoutIgnorePendingStyleSheets;
- (id)_webMailDelegate;
- (void)setWebMailDelegate:(id)arg1;
- (void)makeTextStandardSize:(id)arg1;
- (bool)canMakeTextStandardSize;
- (void)makeTextLarger:(id)arg1;
- (bool)canMakeTextLarger;
- (void)makeTextSmaller:(id)arg1;
- (bool)canMakeTextSmaller;
- (void)reloadFromOrigin:(id)arg1;
- (void)takeStringURLFrom:(id)arg1;
- (bool)canGoForward;
- (bool)canGoBack;
- (void)goForward:(id)arg1;
- (void)goBack:(id)arg1;
- (void)reload:(id)arg1;
- (void)stopLoading:(id)arg1;
- (void)stopLoadingAndClear;
- (id)scriptDebugDelegate;
- (void)setScriptDebugDelegate:(id)arg1;
- (void)removeVisitedLink:(id)arg1;
- (void)addVisitedLinks:(id)arg1;
- (float)mediaVolume;
- (void)setMediaVolume:(float)arg1;
- (void)resetPageZoom:(id)arg1;
- (bool)canResetPageZoom;
- (void)zoomPageOut:(id)arg1;
- (bool)canZoomPageOut;
- (void)zoomPageIn:(id)arg1;
- (bool)canZoomPageIn;
- (float)pageSizeMultiplier;
- (void)setPageSizeMultiplier:(float)arg1;
- (void)setAllowsUndo:(bool)arg1;
- (bool)allowsUndo;
- (void)scrollDOMRangeToVisible:(id)arg1 withInset:(double)arg2;
- (bool)canMarkAllTextMatches;
- (bool)shouldClose;
- (bool)tabKeyCyclesThroughElements;
- (void)setTabKeyCyclesThroughElements:(bool)arg1;
- (id)DOMRangeOfString:(id)arg1 relativeTo:(id)arg2 options:(unsigned long long)arg3;
- (unsigned long long)countMatchesForText:(id)arg1 inDOMRange:(id)arg2 options:(unsigned long long)arg3 highlight:(bool)arg4 limit:(unsigned long long)arg5 markMatches:(bool)arg6;
- (id)rectsForTextMatches;
- (void)unmarkAllTextMatches;
- (void)setMainFrameDocumentReady:(bool)arg1;
- (void)setHistoryDelegate:(id)arg1;
- (id)historyDelegate;
- (bool)findString:(id)arg1 options:(unsigned long long)arg2;
- (unsigned long long)countMatchesForText:(id)arg1 options:(unsigned long long)arg2 highlight:(bool)arg3 limit:(unsigned long long)arg4 markMatches:(bool)arg5;
- (void)scrollDOMRangeToVisible:(id)arg1;
- (id)computedStyleForElement:(id)arg1 pseudoElement:(id)arg2;
- (id)styleDeclarationWithText:(id)arg1;
- (id)editableDOMRangeForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)registerForEditingDelegateNotification:(id)arg1 selector:(SEL)arg2;
- (bool)smartInsertDeleteEnabled;
- (bool)maintainsInactiveSelection;
- (bool)_shouldChangeSelectedDOMRange:(id)arg1 toDOMRange:(id)arg2 affinity:(int)arg3 stillSelecting:(bool)arg4;
- (bool)isContinuousSpellCheckingEnabled;
- (id)editingDelegate;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinity:(int)arg2;
- (void)setEditingDelegate:(id)arg1;
- (id)selectedDOMRange;
- (void)setEditable:(bool)arg1;
- (int)selectionAffinity;
- (bool)isEditable;
- (id)undoManager;
- (void)setTypingStyle:(id)arg1;
- (id)typingStyle;
- (void)setSmartInsertDeleteEnabled:(bool)arg1;
- (bool)isAutomaticSpellingCorrectionEnabled;
- (bool)isAutomaticTextReplacementEnabled;
- (bool)isAutomaticDashSubstitutionEnabled;
- (bool)isAutomaticLinkDetectionEnabled;
- (bool)isAutomaticQuoteSubstitutionEnabled;
- (void)deleteSelection;
- (void)replaceSelectionWithArchive:(id)arg1;
- (void)replaceSelectionWithMarkupString:(id)arg1;
- (void)replaceSelectionWithText:(id)arg1;
- (void)replaceSelectionWithNode:(id)arg1;
- (void)applyStyle:(id)arg1;
- (void)toggleBaseWritingDirection:(id)arg1;
- (void)takeFindStringFromSelection:(id)arg1;
- (void)startSpeaking:(id)arg1;
- (void)showGuessPanel:(id)arg1;
- (void)performFindPanelAction:(id)arg1;
- (void)pasteFont:(id)arg1;
- (void)pasteAsRichText:(id)arg1;
- (void)orderFrontSubstitutionsPanel:(id)arg1;
- (void)makeBaseWritingDirectionRightToLeft:(id)arg1;
- (void)makeBaseWritingDirectionLeftToRight:(id)arg1;
- (void)copyFont:(id)arg1;
- (void)complete:(id)arg1;
- (void)checkSpelling:(id)arg1;
- (void)changeSpelling:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)changeDocumentBackgroundColor:(id)arg1;
- (void)changeColor:(id)arg1;
- (void)changeBaseWritingDirectionToRTL:(id)arg1;
- (void)changeBaseWritingDirectionToLTR:(id)arg1;
- (void)changeBaseWritingDirection:(id)arg1;
- (void)_performResponderOperation:(SEL)arg1 with:(id)arg2;
- (void)capitalizeWord:(id)arg1;
- (void)lowercaseWord:(id)arg1;
- (void)uppercaseWord:(id)arg1;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (void)clearText:(id)arg1;
- (void)yankAndSelect:(id)arg1;
- (void)yank:(id)arg1;
- (void)unscript:(id)arg1;
- (void)underline:(id)arg1;
- (void)transpose:(id)arg1;
- (void)swapWithMark:(id)arg1;
- (void)superscript:(id)arg1;
- (void)subscript:(id)arg1;
- (void)setMark:(id)arg1;
- (void)selectToMark:(id)arg1;
- (void)selectSentence:(id)arg1;
- (void)selectParagraph:(id)arg1;
- (void)selectLine:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)pageUpAndModifySelection:(id)arg1;
- (void)pageUp:(id)arg1;
- (void)pageDownAndModifySelection:(id)arg1;
- (void)pageDown:(id)arg1;
- (void)overWrite:(id)arg1;
- (void)outdent:(id)arg1;
- (void)moveWordRightAndModifySelection:(id)arg1;
- (void)moveWordRight:(id)arg1;
- (void)moveWordLeftAndModifySelection:(id)arg1;
- (void)moveWordLeft:(id)arg1;
- (void)moveWordForwardAndModifySelection:(id)arg1;
- (void)moveWordForward:(id)arg1;
- (void)moveWordBackwardAndModifySelection:(id)arg1;
- (void)moveWordBackward:(id)arg1;
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;
- (void)moveToRightEndOfLine:(id)arg1;
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;
- (void)moveToLeftEndOfLine:(id)arg1;
- (void)moveToEndOfSentenceAndModifySelection:(id)arg1;
- (void)moveToEndOfSentence:(id)arg1;
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;
- (void)moveToEndOfParagraph:(id)arg1;
- (void)moveToEndOfLineAndModifySelection:(id)arg1;
- (void)moveToEndOfLine:(id)arg1;
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;
- (void)moveToEndOfDocument:(id)arg1;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)arg1;
- (void)moveToBeginningOfSentence:(id)arg1;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;
- (void)moveToBeginningOfParagraph:(id)arg1;
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;
- (void)moveToBeginningOfLine:(id)arg1;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;
- (void)moveToBeginningOfDocument:(id)arg1;
- (void)moveParagraphForwardAndModifySelection:(id)arg1;
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;
- (void)moveForwardAndModifySelection:(id)arg1;
- (void)moveBackwardAndModifySelection:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)insertTabIgnoringFieldEditor:(id)arg1;
- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertLineBreak:(id)arg1;
- (void)indent:(id)arg1;
- (void)ignoreSpelling:(id)arg1;
- (void)deleteWordForward:(id)arg1;
- (void)deleteWordBackward:(id)arg1;
- (void)deleteToMark:(id)arg1;
- (void)deleteToEndOfParagraph:(id)arg1;
- (void)deleteToEndOfLine:(id)arg1;
- (void)deleteToBeginningOfParagraph:(id)arg1;
- (void)deleteToBeginningOfLine:(id)arg1;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)arg1;
- (void)alignRight:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignCenter:(id)arg1;
- (void)selectWord:(id)arg1;
- (void)scrollLineDown:(id)arg1;
- (void)scrollLineUp:(id)arg1;
- (void)scrollPageDown:(id)arg1;
- (void)scrollPageUp:(id)arg1;
- (void)scrollToEndOfDocument:(id)arg1;
- (void)scrollToBeginningOfDocument:(id)arg1;
- (void)insertNewline:(id)arg1;
- (void)insertTab:(id)arg1;
- (void)insertBacktab:(id)arg1;
- (void)moveUpAndModifySelection:(id)arg1;
- (void)moveRightAndModifySelection:(id)arg1;
- (void)moveLeftAndModifySelection:(id)arg1;
- (void)moveDownAndModifySelection:(id)arg1;
- (void)insertParagraphSeparator:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)changeAttributes:(id)arg1;
- (void)stopSpeaking:(id)arg1;
- (void)moveForward:(id)arg1;
- (void)moveBackward:(id)arg1;
- (void)delete:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)toggleItalic:(id)arg1;
- (void)toggleBold:(id)arg1;
- (void)insertDictationPhrases:(id)arg1 metadata:(id)arg2;
- (void)deleteBackward:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)insertText:(id)arg1;
- (id)typingAttributes;
- (void)_simplifyMarkup:(id)arg1 endNode:(id)arg2;
- (bool)_selectionIsAll;
- (bool)_selectionIsCaret;
- (void)_replaceSelectionWithNode:(id)arg1 matchStyle:(bool)arg2;
- (void)_insertNewlineInQuotedContent;
- (id)_responderForResponderOperations;
- (bool)_continuousCheckingAllowed;
- (id)_frameViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_focusedFrame;
- (bool)_isLoading;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromRootView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromRootView:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_needsOneShotDrawingSynchronization;
- (bool)_becomingFirstResponderFromOutside;
- (void)_retrieveKeyboardUIModeFromPreferences:(id)arg1;
- (struct Frame { int (**x1)(); unsigned int x2; struct HashSet<WebCore::FrameDestructionObserver *, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct HashTable<WebCore::FrameDestructionObserver *, WebCore::FrameDestructionObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct FrameDestructionObserver {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_3_1_1; } x3; struct MainFrame {} *x4; struct Page {} *x5; struct RefPtr<WebCore::Settings> { struct Settings {} *x_6_1_1; } x6; struct FrameTree { struct Frame {} *x_7_1_1; struct Frame {} *x_7_1_2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_3_2_1; } x_7_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_7_1_4; struct RefPtr<WebCore::Frame> { struct Frame {} *x_5_2_1; } x_7_1_5; struct Frame {} *x_7_1_6; struct RefPtr<WebCore::Frame> { struct Frame {} *x_7_2_1; } x_7_1_7; struct Frame {} *x_7_1_8; unsigned int x_7_1_9; } x7; struct FrameLoader { struct Frame {} *x_8_1_1; struct FrameLoaderClient {} *x_8_1_2; struct unique_ptr<WebCore::PolicyChecker, std::__1::default_delete<WebCore::PolicyChecker> > { struct __compressed_pair<WebCore::PolicyChecker *, std::__1::default_delete<WebCore::PolicyChecker> > { struct PolicyChecker {} *x_1_3_1; } x_3_2_1; } x_8_1_3; struct unique_ptr<WebCore::HistoryController, std::__1::default_delete<WebCore::HistoryController> > { struct __compressed_pair<WebCore::HistoryController *, std::__1::default_delete<WebCore::HistoryController> > { struct HistoryController {} *x_1_3_1; } x_4_2_1; } x_8_1_4; struct ResourceLoadNotifier { struct Frame {} *x_5_2_1; } x_8_1_5; struct unique_ptr<WebCore::SubframeLoader, std::__1::default_delete<WebCore::SubframeLoader> > { struct __compressed_pair<WebCore::SubframeLoader *, std::__1::default_delete<WebCore::SubframeLoader> > { struct SubframeLoader {} *x_1_3_1; } x_6_2_1; } x_8_1_6; struct FrameLoaderStateMachine { int x_7_2_1; } x_8_1_7; struct unique_ptr<WebCore::IconController, std::__1::default_delete<WebCore::IconController> > { struct __compressed_pair<WebCore::IconController *, std::__1::default_delete<WebCore::IconController> > { struct IconController {} *x_1_3_1; } x_8_2_1; } x_8_1_8; struct MixedContentChecker { struct Frame {} *x_9_2_1; } x_8_1_9; struct unique_ptr<WebCore::FrameLoader::FrameProgressTracker, std::__1::default_delete<WebCore::FrameLoader::FrameProgressTracker> > { struct __compressed_pair<WebCore::FrameLoader::FrameProgressTracker *, std::__1::default_delete<WebCore::FrameLoader::FrameProgressTracker> > { struct FrameProgressTracker {} *x_1_3_1; } x_10_2_1; } x_8_1_10; int x_8_1_11; int x_8_1_12; struct RefPtr<WebCore::DocumentLoader> { struct DocumentLoader {} *x_13_2_1; } x_8_1_13; struct RefPtr<WebCore::DocumentLoader> { struct DocumentLoader {} *x_14_2_1; } x_8_1_14; struct RefPtr<WebCore::DocumentLoader> { struct DocumentLoader {} *x_15_2_1; } x_8_1_15; boolx_8_1_16; boolx_8_1_17; boolx_8_1_18; boolx_8_1_19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_20_2_1; } x_8_1_20; boolx_8_1_21; boolx_8_1_22; boolx_8_1_23; int x_8_1_24; boolx_8_1_25; struct RefPtr<WebCore::SerializedScriptValue> { struct SerializedScriptValue {} *x_26_2_1; } x_8_1_26; boolx_8_1_27; struct URL { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_28_2_1; unsigned int x_28_2_2 : 1; unsigned int x_28_2_3 : 1; int x_28_2_4; int x_28_2_5; int x_28_2_6; int x_28_2_7; int x_28_2_8; int x_28_2_9; int x_28_2_10; int x_28_2_11; int x_28_2_12; int x_28_2_13; } x_8_1_28; struct Timer<WebCore::FrameLoader> { int (**x_29_2_1)(); double x_29_2_2; double x_29_2_3; double x_29_2_4; int x_29_2_5; unsigned int x_29_2_6; struct Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow> {} *x_29_2_7; struct function<void ()>={type=[24C] {} x_29_2_8; struct __base<void ()> {} *x_29_2_9; } x_8_1_29; } x8; boolx9; boolx10; struct Frame {} *x11; struct HashSet<WebCore::Frame *, WTF::PtrHash<WebCore::Frame *>, WTF::HashTraits<WebCore::Frame *> > { struct HashTable<WebCore::Frame *, WebCore::Frame *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::Frame *>, WTF::HashTraits<WebCore::Frame *>, WTF::HashTraits<WebCore::Frame *> > { struct Frame {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_12_1_1; } x12; boolx13; boolx14; boolx15; boolx16; int x17; struct RefPtr<WebCore::FrameNetworkingContext> { struct FrameNetworkingContext {} *x_18_1_1; } x18; struct URL { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_19_1_1; unsigned int x_19_1_2 : 1; unsigned int x_19_1_3 : 1; int x_19_1_4; int x_19_1_5; int x_19_1_6; int x_19_1_7; int x_19_1_8; int x_19_1_9; int x_19_1_10; int x_19_1_11; int x_19_1_12; int x_19_1_13; } x19; struct RefPtr<WebCore::HistoryItem> { struct HistoryItem {} *x_20_1_1; } x20; struct unique_ptr<WebCore::PageActivityAssertionToken, std::__1::default_delete<WebCore::PageActivityAssertionToken> > { struct __compressed_pair<WebCore::PageActivityAssertionToken *, std::__1::default_delete<WebCore::PageActivityAssertionToken> > { struct PageActivityAssertionToken {} *x_1_2_1; } x_21_1_1; } x21; }*)_mainCoreFrame;
- (bool)_flushCompositingChanges;
- (void)_removeObjectForIdentifier:(unsigned long long)arg1;
- (id)_objectForIdentifier:(unsigned long long)arg1;
- (void)_addObject:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)_exitFullscreen;
- (void)_enterFullscreenForNode:(struct Node { int (**x1)(); struct Weak<WebCore::JSDOMWrapper> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; }*)arg1;
- (void)_scheduleCompositingLayerFlush;
- (void)_setNeedsOneShotDrawingSynchronization:(bool)arg1;
- (int)_keyboardUIMode;
- (id)_selectedOrMainFrame;
- (void)_scheduleLayerFlushForPendingTileCacheRepaint;
- (void)_setDeviceOrientationProvider:(id)arg1;
- (id)_deviceOrientationProvider;
- (void)_setGeolocationProvider:(id)arg1;
- (void)_resetAllGeolocationPermission;
- (void)_geolocationDidFailWithMessage:(id)arg1;
- (void)_geolocationDidChangePosition:(id)arg1;
- (id)_geolocationProvider;
- (unsigned long long)_notificationIDForTesting:(struct OpaqueJSValue { }*)arg1;
- (void)_notificationsDidClose:(id)arg1;
- (void)_notificationDidClick:(unsigned long long)arg1;
- (void)_notificationDidShow:(unsigned long long)arg1;
- (void)_setNotificationProvider:(id)arg1;
- (id)_notificationProvider;
- (id)fullScreenPlaceholderView;

@end

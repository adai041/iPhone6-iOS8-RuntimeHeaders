/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/PrintKit.framework/PrintKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSURL, NSArray, NSMutableDictionary, NSDictionary, PKPaperList, NSNumber;

@interface PKPrinter : NSObject  {
    NSString *name;
    long long type;
    long long accessState;
    NSDictionary *printInfoSupported;

  /* Error parsing encoded ivar type info: ^{_http_s=iiiqiiii{sockaddr_in=CCS{in_addr=I}[8c]}[256c][27[256c]]*iii[2048c]i{_cups_md5_state_s=[2I][4I][64C]}[256c]i^{SSLContext}i^{fd_set}i*[256c][256c]iq^(_http_addr_u)^{http_addrlist_s}[2048c]i**^{__CFArray}^?^vdiii******i{z_stream_s=*IQ*IQ*^{internal_state}^?^?^viQQ}*} */
    struct _http_s { int x1; int x2; int x3; long long x4; int x5; int x6; int x7; int x8; struct sockaddr_in { unsigned char x_9_1_1; unsigned char x_9_1_2; unsigned short x_9_1_3; struct in_addr { unsigned int x_4_2_1; } x_9_1_4; BOOL x_9_1_5[8]; } x9; BOOL x10[256]; BOOL x11[27][256]; char *x12; int x13; int x14; int x15; BOOL x16[2048]; int x17; struct _cups_md5_state_s { unsigned int x_18_1_1[2]; unsigned int x_18_1_2[4]; unsigned char x_18_1_3[64]; } x18; BOOL x19[256]; int x20; struct SSLContext {} *x21; int x22; struct fd_set {} *x23; int x24; char *x25; BOOL x26[256]; BOOL x27[256]; int x28; long long x29; union { /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_30_1_1; void*x_30_1_2; void*x_30_1_3; void*x_30_1_4; void*x_30_1_5; void*x_30_1_6; void*x_30_1_7; double x_30_1_8; double x_30_1_9; const void*x_30_1_10; void*x_30_1_11; } *x30; struct http_addrlist_s {} *x31; BOOL x32[2048]; int x33; char *x34; char *x35; struct __CFArray {} *x36; int (*x37)(); void *x38; double x39; int x40; int x41; int x42; char *x43; char *x44; char *x45; char *x46; char *x47; char *x48; int x49; struct z_stream_s { char *x_50_1_1; unsigned int x_50_1_2; unsigned long long x_50_1_3; char *x_50_1_4; unsigned int x_50_1_5; unsigned long long x_50_1_6; char *x_50_1_7; struct internal_state {} *x_50_1_8; int (*x_50_1_9)(); int (*x_50_1_10)(); void *x_50_1_11; int x_50_1_12; unsigned long long x_50_1_13; unsigned long long x_50_1_14; } x50; char *x51; } *job_http;

    NSMutableDictionary *privateData;
    NSMutableDictionary *specialFeedOrientation;
    NSArray *printScalingSupported;
    NSArray *mandatoryJobAttributes;
    NSString *quotaManagementURL;
    int maxPDFKBytes;
    int maxJPEGKBytes;
    int maxJPEGXDimension;
    int maxJPEGYDimension;
    int maxCopies;
    int preferred_landscape;
    int printerStateReasons;
    boolisLocal;
    boolhasIdentifyPrinterOp;
    boolconnectionShouldNotBeTrusted;
    boolisFromMCProfile;
    long long kind;
    PKPaperList *_paperList;
}

@property long long accessState;
@property(retain) NSDictionary * TXTRecord;
@property(retain) NSString * hostname;
@property(retain) NSNumber * port;
@property(retain,readonly) NSString * scheme;
@property(readonly) NSString * name;
@property(readonly) NSURL * printerURL;
@property(readonly) long long kind;
@property(readonly) long long jobTypesSupported;
@property(readonly) long long type;
@property(readonly) long long accessState;
@property(readonly) bool hasPrintInfoSupported;
@property(readonly) NSDictionary * printInfoSupported;
@property(readonly) bool isAdobeRGBSupported;
@property bool isLocal;
@property bool isFromMCProfile;
@property(readonly) bool isIPPS;
@property(readonly) NSString * uuid;
@property(readonly) bool hasIdentifyPrinterOp;
@property(readonly) bool needsSetup;
@property(readonly) bool setupSupportsPasswordScope;
@property(retain) PKPaperList * paperList;

+ (id)nameForHardcodedURI:(id)arg1;
+ (id)hardcodedURIs;
+ (id)printerWithName:(id)arg1;
+ (bool)printerLookupWithName:(id)arg1 andTimeout:(double)arg2;
+ (id)printerWithName:(id)arg1 discoveryTimeout:(double)arg2;
+ (struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)getAttributes:(const char **)arg1 count:(int)arg2 fromURI:(id)arg3;
+ (id)requiredPDL;
+ (bool)urfIsOptional;

- (bool)hasIdentifyPrinterOp;
- (bool)isFromMCProfile;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)isAdobeRGBSupported;
- (void)identifySelf;
- (long long)feedOrientation:(id)arg1;
- (void)checkOperations:(struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)arg1;
- (void)aggdAppsAndPrinters;
- (void)setPaperList:(id)arg1;
- (id)paperListForDuplexMode:(id)arg1;
- (id)rollReadyPaperListWithContentSize:(struct CGSize { double x1; double x2; })arg1 forPhoto:(bool)arg2;
- (void)doMedia2:(struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)arg1;
- (void)handlePrinterStateReasonsFromResponse:(struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)arg1;
- (void)reconfirmWithForce:(bool)arg1;
- (void)setIsFromMCProfile:(bool)arg1;
- (bool)isBonjour;
- (bool)isIPPS;
- (void)showPassCodeForSetupWithCompletionHandler:(id)arg1;
- (void)setupWithOptions:(id)arg1 completionHandler:(id)arg2;
- (bool)setupSupportsPasswordScope;
- (void)validatePassCode:(id)arg1 withCompletionHandler:(id)arg2;
- (long long)sendData:(const char *)arg1 ofLength:(long long)arg2;
- (long long)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3;
- (long long)abortJob;
- (long long)finishJob;
- (long long)startJob:(id)arg1 ofType:(id)arg2;
- (id)matchedPaper:(id)arg1 preferBorderless:(bool)arg2 withDuplexMode:(id)arg3 didMatch:(bool*)arg4;
- (bool)isPaperReady:(id)arg1;
- (id)availableRollPapersPreferBorderless:(bool)arg1;
- (void)unlockWithCompletionHandler:(id)arg1;
- (bool)needsSetup;
- (long long)accessState;
- (id)uuid;
- (long long)kind;
- (void)cancelUnlock;
- (id)localizedPrinterWarnings;
- (id)paperList;
- (bool)knowsReadyPaperList;
- (id)papersForDocumentWithSize:(struct CGSize { double x1; double x2; })arg1 andDuplex:(bool)arg2;
- (id)papersForPhotoWithSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)hasPrintInfoSupported;
- (id)printInfoSupported;
- (id)makeAndModel;
- (long long)jobTypesSupported;
- (id)printerURL;
- (id)displayName;
- (id)location;
- (id)name;
- (long long)type;
- (id)description;
- (void)dealloc;
- (void)setIsLocal:(bool)arg1;
- (bool)isLocal;
- (id)hostname;
- (void)updateType;
- (void)setTXTRecord:(id)arg1;
- (void)setAccessState:(long long)arg1;
- (id)privateObjectForKey:(id)arg1;
- (void)setPrivateObject:(id)arg1 forKey:(id)arg2;
- (struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)createRequest:(id)arg1 ofType:(id)arg2 url:(id)arg3;
- (long long)finalizeJob:(int)arg1;
- (struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)getPrinterAttributes;
- (struct _ipp_s { int x1; union _ipp_request_u { struct { unsigned char x_1_2_1[2]; int x_1_2_2; int x_1_2_3; } x_2_1_1; struct { unsigned char x_2_2_1[2]; int x_2_2_2; int x_2_2_3; } x_2_1_2; struct { unsigned char x_3_2_1[2]; int x_3_2_2; int x_3_2_3; } x_2_1_3; struct { unsigned char x_4_2_1[2]; int x_4_2_2; int x_4_2_3; } x_2_1_4; } x2; struct _ipp_attribute_s {} *x3; struct _ipp_attribute_s {} *x4; struct _ipp_attribute_s {} *x5; int x6; struct _ipp_attribute_s {} *x7; int x8; int x9; int x10; }*)getAttributes:(const char **)arg1 count:(int)arg2;
- (id)txtRecordObjectForKey:(id)arg1;
- (id)TXTRecordWithTimeout:(int)arg1;
- (void)setAccessStateFromTXT;
- (id)TXTRecord;
- (id)initWithName:(id)arg1 TXTRecord:(id)arg2;
- (id)initWithName:(id)arg1 TXT:(id)arg2;
- (void)setHostname:(id)arg1;
- (void)setPort:(id)arg1;
- (id)localName;
- (id)port;
- (id)scheme;
- (void)resolve;
- (bool)resolveWithTimeout:(int)arg1;
- (bool)isEqual:(id)arg1;

@end

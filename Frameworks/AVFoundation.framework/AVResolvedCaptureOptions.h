/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@class NSString, NSMutableDictionary, AVCaptureDeviceFormat_FigRecorder;

@interface AVResolvedCaptureOptions : NSObject  {
    NSString *sessionPreset;
    boolcaptureSessionPresetChanging;
    NSMutableDictionary *baseCaptureOptions;
    NSMutableDictionary *optionsOverrides;
    struct __CFDictionary { } *outputSettingsOverrides;
    boolusePreviewSizedCaptureBuffers;
    booluseStabilizationIfAvailable;
    boolhasStillImageOutput;
    NSString *faceDetectionMode;
    boolfaceDetectionNotificationsEnabled;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } videoConnectionMinFrameDuration;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } videoConnectionMaxFrameDuration;
    AVCaptureDeviceFormat_FigRecorder *resolvedVideoDeviceFormat;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } resolvedVideoMinFrameDuration;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } resolvedVideoMaxFrameDuration;
    NSMutableDictionary *resolvedVideoCompressionProperties;
    NSMutableDictionary *resolvedCaptureOptions;
    boolresolvesFrameRatesUsingDefaultValues;
    boolresetsVideoZoomFactorToDefaultValue;
}

@property bool hasStillImageOutput;
@property bool resolvesFrameRatesUsingDefaultValues;
@property bool resetsVideoZoomFactorToDefaultValue;
@property(readonly) NSString * sessionPreset;

+ (void)initialize;
+ (id)resolvedCaptureOptionsWithSessionPreset:(id)arg1 captureOptionsDictionary:(id)arg2;

- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)dealloc;
- (void)setResetsVideoZoomFactorToDefaultValue:(bool)arg1;
- (void)setResolvesFrameRatesUsingDefaultValues:(bool)arg1;
- (id)resolvedVideoCompressionProperties;
- (bool)hasStillImageOutput;
- (bool)hasHeightOverrideInResolvedOptions:(id)arg1;
- (bool)hasWidthOverrideInResolvedOptions:(id)arg1;
- (id)resolvedVideoSettingsForMovieFileOutput;
- (id)resolvedVideoSettingsWithScalingAllowed:(bool)arg1;
- (id)resolvedCaptureOptionsDictionary;
- (void)setBestPreviewResolutionForCaptureOptions:(id)arg1;
- (bool)hasOverridesAffectingPreviewFormatInResolvedOptions:(id)arg1 withScalingMode:(id)arg2;
- (void)setBestCaptureResolutionForAVScalingMode:(id)arg1 captureOptions:(id)arg2;
- (bool)hasOverridesAffectingCaptureFormatInResolvedOptions:(id)arg1 withScalingMode:(id)arg2;
- (void)resolveOutputSettingsToCaptureOptions:(id)arg1 resolvedScalingMode:(id*)arg2;
- (void)resolveFrameRatesToCaptureOptions:(id)arg1 withCamera:(id)arg2 activeFormat:(id)arg3;
- (void)applyInputPriorityOverridesToCaptureOptions:(id)arg1 forCamera:(id)arg2;
- (id)deviceFormatForCamera:(id)arg1 captureOptions:(id)arg2;
- (id)cameraForCaptureOptions:(id)arg1;
- (int)rankForFaceDetectionMode:(id)arg1;
- (id)initWithSessionPreset:(id)arg1 captureOptionsDictionary:(id)arg2;
- (bool)resolvesFrameRatesUsingDefaultValues;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })resolvedVideoMaxFrameDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })resolvedVideoMinFrameDuration;
- (bool)resetsVideoZoomFactorToDefaultValue;
- (id)resolvedVideoDeviceFormat;
- (void)enableFaceDetectionNotificationsForConnection:(id)arg1;
- (void)addFaceDetectionMode:(id)arg1 forConnection:(id)arg2;
- (void)setHasStillImageOutput:(bool)arg1;
- (void)useStabilizationIfAvailableForConnection:(id)arg1;
- (void)usePreviewSizedCaptureBuffersForConnection:(id)arg1;
- (id)baseCaptureOptions;
- (void)addOutputSettings:(id)arg1 forConnection:(id)arg2;
- (id)resolvedVideoSettingsForAssetWriter;
- (id)sessionPreset;
- (void)addMaxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forConnection:(id)arg2;
- (void)addMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forConnection:(id)arg2;

@end

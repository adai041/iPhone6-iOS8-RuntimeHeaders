/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@class NSString, NSArray, AVPlayerItemInternal, NSDate, NSError;

@interface AVPlayerItem : NSObject <NSCopying> {
    AVPlayerItemInternal *_playerItem;
}

@property(copy) NSString * serviceIdentifier;
@property unsigned long long restrictions;
@property(copy) NSString * mediaKind;
@property(readonly) NSArray * outputs;
@property(copy) NSString * dataYouTubeID;
@property(getter=_isExternalProtectionRequiredForPlayback,setter=_setExternalProtectionRequiredForPlayback:) bool _externalProtectionRequiredForPlayback;
@property(getter=_isRental,readonly) bool _rental;
@property(readonly) NSDate * _rentalStartDate;
@property(readonly) NSDate * _rentalExpirationDate;
@property(getter=_isRentalPlaybackStarted,readonly) bool _rentalPlaybackStarted;
@property(readonly) NSDate * _rentalPlaybackStartedDate;
@property(readonly) NSDate * _rentalPlaybackExpirationDate;
@property(getter=isAuthorizationRequiredForPlayback,readonly) bool authorizationRequiredForPlayback;
@property(getter=isApplicationAuthorizedForPlayback,readonly) bool applicationAuthorizedForPlayback;
@property(getter=isContentAuthorizedForPlayback,readonly) bool contentAuthorizedForPlayback;
@property(readonly) long long status;
@property(readonly) NSError * error;

+ (void)initialize;
+ (id)playerItemWithAsset:(id)arg1;
+ (bool)automaticallyNotifiesObserversOfTracks;
+ (bool)automaticallyNotifiesObserversOfPresentationSize;
+ (bool)automaticallyNotifiesObserversOfLoadedTimeRanges;
+ (bool)automaticallyNotifiesObserversOfSeekableTimeRanges;
+ (bool)automaticallyNotifiesObserversOfPlaybackBufferFull;
+ (bool)automaticallyNotifiesObserversOfPlaybackBufferEmpty;
+ (bool)automaticallyNotifiesObserversOfPlaybackLikelyToKeepUp;
+ (bool)automaticallyNotifiesObserversOfAsset;
+ (bool)automaticallyNotifiesObserversOfStatus;
+ (bool)automaticallyNotifiesObserversOfAllowProgressiveSwitchUp;
+ (bool)automaticallyNotifiesObserversOfNetworkUsuallyExceedsMaxBitRate;
+ (bool)automaticallyNotifiesObserversOfHasEnabledAudio;
+ (bool)automaticallyNotifiesObserversOfHasEnabledVideo;
+ (bool)automaticallyNotifiesObserversOfVariantIndex;
+ (bool)automaticallyNotifiesObserversOfSavesDownloadedDataToDiskWhenDone;
+ (id)playerItemWithAsset:(id)arg1 automaticallyLoadedAssetKeys:(id)arg2;
+ (struct OpaqueCMTimebase { }*)_copyTimebaseFromFigPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1;
+ (bool)_forNonStreamingURLsFireKVOForAssetWhenReadyForInspection;
+ (bool)_forStreamingItemsVendAssetWithFigPlaybackItem;
+ (id)playerItemWithURL:(id)arg1;
+ (void)_uninitializeProtectedContentPlaybackSupportSession:(id)arg1;
+ (id)_initializeProtectedContentPlaybackSupportSessionAsynchronouslyForProvider:(id)arg1 withOptions:(id)arg2;

- (id)loadedTimeRanges;
- (bool)hasEnabledVideo;
- (bool)hasEnabledAudio;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)tracks;
- (id)selectedMediaOptionInMediaSelectionGroup:(id)arg1;
- (void)selectMediaOption:(id)arg1 inMediaSelectionGroup:(id)arg2;
- (id)seekableTimeRanges;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id)arg4;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)finalize;
- (id)error;
- (struct CGSize { double x1; double x2; })presentationSize;
- (long long)status;
- (id)asset;
- (id)initWithAsset:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4;
- (id)initWithURL:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)didChangeValueForKey:(id)arg1;
- (void)willChangeValueForKey:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_duration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })duration;
- (id)delegate;
- (id)description;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)dealloc;
- (void)_setAsset:(id)arg1;
- (void)setPlaybackLikelyToKeepUpTrigger:(long long)arg1;
- (bool)canPlayFastReverse;
- (bool)canPlayFastForward;
- (bool)isPlaybackBufferFull;
- (bool)isPlaybackLikelyToKeepUp;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (float)soundCheckVolumeNormalization;
- (void)setGaplessInfo:(id)arg1;
- (void)setSoundCheckVolumeNormalization:(float)arg1;
- (id)_seekableTimeRanges;
- (void)setForwardPlaybackEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })forwardPlaybackEndTime;
- (void)selectMediaOptionAutomaticallyInMediaSelectionGroup:(id)arg1;
- (bool)seekToDate:(id)arg1;
- (id)currentDate;
- (void)setLimitReadAhead:(bool)arg1;
- (bool)limitReadAhead;
- (id)timedMetadata;
- (id)_player;
- (void)setRequiresAccessLog:(bool)arg1;
- (void)_renderingSuppressionDidChangeForOutput:(id)arg1;
- (void)setMaximumBitRate:(float)arg1;
- (float)maximumBitRate;
- (void)setAllowProgressiveSwitchUp:(bool)arg1;
- (void)setNetworkUsuallyExceedsMaxBitRate:(bool)arg1;
- (id)_playbackItemNotificationPayloadToError:(struct __CFDictionary { }*)arg1;
- (void)_addSyncLayer:(id)arg1;
- (void)_removeSyncLayer:(id)arg1;
- (struct OpaqueFigCPEProtector { }*)_figCPEProtector;
- (void)setVariantIndex:(long long)arg1;
- (long long)variantIndex;
- (id)playabilityMetrics;
- (float)progressTowardsPlaybackLikelyToKeepUp;
- (bool)isPlaybackBufferEmpty;
- (void)setAudioTimePitchAlgorithm:(id)arg1;
- (void)setSeekingWaitsForVideoCompositionRendering:(bool)arg1;
- (void)setWillNeverSeekBackwardsHint:(bool)arg1;
- (bool)willNeverSeekBackwardsHint;
- (long long)playbackLikelyToKeepUpTrigger;
- (void)setAlwaysMonitorsPlayability:(bool)arg1;
- (bool)alwaysMonitorsPlayability;
- (void)setMaximumTrailingBufferDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setAllowsExtendedReadAhead:(bool)arg1;
- (void)setRTCReportingFlags:(unsigned int)arg1;
- (void)stepByCount:(long long)arg1;
- (void)setInitialEstimatedDate:(id)arg1;
- (id)currentEstimatedDate;
- (void)setInitialDate:(id)arg1;
- (bool)canStepBackward;
- (bool)canStepForward;
- (bool)canPlaySlowReverse;
- (bool)canPlaySlowForward;
- (bool)canPlayReverse;
- (id)_trackWithTrackID:(int)arg1;
- (void)_setAssetToAssetWithFigPlaybackItemIfAppropriate;
- (void)_updateLegibleSuppressionOnFigPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 basedOnOutputs:(id)arg2;
- (void)_updateVideoSuppressionOnFigPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 basedOnOutputs:(id)arg2;
- (void)setPreferredPeakBitRate:(double)arg1;
- (void)_setSuppressesVideoLayers:(bool)arg1;
- (bool)_suppressionForOutputs:(id)arg1;
- (void)_clearCachedMediaSelectionGroup:(id)arg1;
- (void)_allowSelectMediaOptionsAutomaticallyUsingFigSelectedMediaArrayObtainedFromGroup:(id)arg1;
- (void)_selectMediaOption:(id)arg1 inNonStreamingGroup:(id)arg2 cacheIfAppropriate:(bool)arg3;
- (void)_selectMediaOption:(id)arg1 inStreamingGroup:(id)arg2 cacheIfAppropriate:(bool)arg3;
- (void)_cacheMediaSelectionOption:(id)arg1 forMediaSelectionGroup:(id)arg2;
- (void)_selectMediaOption:(id)arg1 usingFigSelectedMediaArrayObtainedFromGroup:(id)arg2;
- (void)_selectMediaOption:(id)arg1 inMediaSelectionGroup:(id)arg2 cacheIfAppropriate:(bool)arg3;
- (id)_loadedTimeRanges;
- (id)_loadedTimeRangesFromFPPlaybableTimeIntervals:(id)arg1;
- (id)_seekableTimeRangesFromFPSeekableTimeIntervals:(id)arg1;
- (id)_audioTimePitchAlgorithm;
- (void)_setAudioTimePitchAlgorithm:(id)arg1 forTrackID:(int)arg2;
- (id)audioTimePitchAlgorithm;
- (void)_setAudioTapProcessor:(struct opaqueMTAudioProcessingTap { }*)arg1 forTrackID:(int)arg2;
- (void)_setAudioCurvesAccordingToInputParameters:(id)arg1 forTrackID:(int)arg2;
- (bool)_continuesPlayingDuringPrerollForRateChange;
- (bool)_continuesPlayingDuringPrerollForSeek;
- (bool)_willNeverSeekBackwardsHint;
- (long long)_playbackLikelyToKeepUpTrigger;
- (bool)_alwaysMonitorsPlayability;
- (bool)_limitReadAhead;
- (struct OpaqueCMTimebase { }*)_copyTimebase;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_reversePlaybackEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_forwardPlaybackEndTime;
- (void)_unregisterInvokeAndReleasePendingSeekCompletionHandlerForSeekID:(int)arg1 finished:(bool)arg2;
- (int)_cancelPendingSeekAndRegisterSeekCompletionHandler:(id)arg1;
- (int)_CreateSeekID;
- (bool)_canStepBackward;
- (bool)_canStepForward;
- (bool)_canPlaySlowReverse;
- (bool)_canPlaySlowForward;
- (bool)_canPlayReverse;
- (bool)_isAFileBasedItemThatsReadyToPlay;
- (bool)_canPlayFastReverse;
- (bool)_canPlayFastForward;
- (void)_invokeReadyForEnqueueingHandlers;
- (void)_informObserversAboutAvailabilityOfPresentationSize;
- (void)_informObserversAboutAvailabilityOfTracks;
- (void)_kickAssetObserversIfAppropriate;
- (void)_informObserversAboutAvailabilityOfDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_respondToBecomingReadyForBasicInspectionWithDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)_tracksFromAssetTrackIDs;
- (id)_tracksWithFPTrackIDArray:(id)arg1;
- (void)_setTrackIDsForAssetWithFigPlaybackItem:(id)arg1;
- (bool)_isCurrentPlayerItem;
- (struct CGSize { double x1; double x2; })_presentationSize;
- (bool)_hasEnabledAudio;
- (void)_makeNewAssetWithFigPlaybackItem;
- (void)_setAssetWithFigPlaybackItem:(id)arg1;
- (void)_addFAListeners;
- (void)_createPlayerConnection:(id)arg1 shouldAppendItem:(bool)arg2;
- (void)_attachToFigPlayer;
- (bool)_isNonForcedSubtitleDisplayEnabled;
- (void)_respondToBecomingReadyForBasicInspection;
- (id)_cachedTracks;
- (void)_quietlySetNonForcedSubtitleDisplayEnabled:(bool)arg1;
- (void)_quietlySetAlwaysMonitorsPlayability:(bool)arg1;
- (void)_quietlySetWillNeverSeekBackwardsHint:(bool)arg1;
- (void)_quietlySetPlaybackLikelyToKeepUpTrigger:(long long)arg1;
- (void)_quietlySetAllowsExtendedReadAhead:(bool)arg1;
- (void)_quietlySetLimitReadAhead:(bool)arg1;
- (void)_configurePlaybackItem;
- (void)_setPlayerConnection:(id)arg1;
- (void)_quietlySetRTCReportingFlags:(unsigned int)arg1;
- (void)_quietlySetMaximumTrailingBufferDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_updateTimebase;
- (void)_setSyncLayersOnFigPlaybackItem:(id)arg1;
- (void)_applyTextStyleRules;
- (void)_applyMediaSelectionOptions;
- (void)_quietlySetFigTimePitchAlgorithm:(struct __CFString { }*)arg1;
- (void)_quietlySetVolumeAdjustment:(float)arg1;
- (void)_quietlySetSoundCheckVolumeNormalization:(float)arg1;
- (void)_quietlySetVariantIndex:(long long)arg1;
- (void)_quietlySetPlaybackProperties:(id)arg1;
- (id)_playbackProperties;
- (void)_applySeekingWaitsForVideoCompositionRendering;
- (void)_applyNewAudioMix:(id)arg1 oldAudioMix:(id)arg2;
- (void)_setVideoCompositor:(void*)arg1;
- (void)_setVideoCompositionInstructions:(id)arg1;
- (void)_setVideoCompositionRenderScale:(float)arg1;
- (void)_setVideoCompositionRenderSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setVideoCompositionFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_quietlySetSpeedThresholdForIFrameOnlyPlayback:(float)arg1;
- (void)_quietlySetMinimumIntervalForIFrameOnlyPlayback:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_quietlySetUsesIFrameOnlyPlaybackForHighRateScaledEdits:(bool)arg1;
- (void)_quietlySetContinuesPlayingDuringPrerollForRateChange:(bool)arg1;
- (void)_quietlySetContinuesPlayingDuringPrerollForSeek:(bool)arg1;
- (void)_quietlySetReversePlaybackEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_quietlySetForwardPlaybackEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setSavesDownloadedDataToDiskWhenDone:(bool)arg1;
- (id)_URL;
- (void)setNonForcedSubtitleDisplayEnabled:(bool)arg1;
- (bool)isNonForcedSubtitleDisplayEnabled;
- (void)setSpeedThresholdForIFrameOnlyPlayback:(float)arg1;
- (void)setMinimumIntervalForIFrameOnlyPlayback:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setUsesIFrameOnlyPlaybackForHighRateScaledEdits:(bool)arg1;
- (void)setContinuesPlayingDuringPrerollForSeek:(bool)arg1;
- (bool)continuesPlayingDuringPrerollForSeek;
- (void)setContinuesPlayingDuringPrerollForRateChange:(bool)arg1;
- (bool)continuesPlayingDuringPrerollForRateChange;
- (void)setVolumeAdjustment:(float)arg1;
- (void)setReversePlaybackEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTextStyleRules:(id)arg1;
- (void)setAudioMix:(id)arg1;
- (void)_removeFAListeners;
- (void)_setURL:(id)arg1;
- (void)_createPlayerItemInternal;
- (id)initWithAsset:(id)arg1 automaticallyLoadedAssetKeys:(id)arg2;
- (unsigned int)RTCReportingFlags;
- (bool)requiresAccessLog;
- (float)volumeAdjustment;
- (id)gaplessInfo;
- (id)textStyleRules;
- (bool)seekingWaitsForVideoCompositionRendering;
- (id)audioMix;
- (double)preferredPeakBitRate;
- (bool)allowProgressiveSwitchUp;
- (bool)networkUsuallyExceedsMaxBitRate;
- (bool)savesDownloadedDataToDiskWhenDone;
- (float)speedThresholdForIFrameOnlyPlayback;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minimumIntervalForIFrameOnlyPlayback;
- (bool)usesIFrameOnlyPlaybackForHighRateScaledEdits;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })maximumTrailingBufferDuration;
- (bool)allowsExtendedReadAhead;
- (id)initialEstimatedDate;
- (id)initialDate;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })reversePlaybackEndTime;
- (id)automaticallyLoadedAssetKeys;
- (void)cancelPendingSeeks;
- (void)_setTimedMetadata:(id)arg1;
- (bool)_hasEnabledVideo;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completionHandler:(id)arg2;
- (id)_fpNotificationNames;
- (struct OpaqueCMTimebase { }*)timebase;
- (bool)seekToDate:(id)arg1 completionHandler:(id)arg2;
- (void)_removeFromItems;
- (void)_dequeueFromPlayer;
- (id)_previousItem;
- (void)_insertAfterItem:(id)arg1;
- (void)_attachToPlayer:(id)arg1;
- (void)_changeStatusToFailedWithError:(id)arg1;
- (void)_makeReadyForEnqueueingWithCompletionHandler:(id)arg1;
- (id)_nextItem;
- (id)_propertyStorage;
- (void)_addFPListeners;
- (id)_playerConnection;
- (void)_enqueueWithPlayer:(id)arg1 shouldAppendItem:(bool)arg2;
- (struct OpaqueFigPlaybackItem { }*)_copyFigPlaybackItem;
- (struct OpaqueCMTimebase { }*)_copyProxyTimebase;
- (void)_setIsCurrentPlayerItem:(bool)arg1;
- (bool)_suppressesVideoLayers;
- (void)_playerChangeStatusToFailedWithError:(id)arg1;
- (void)_didAccessKVOForKey:(id)arg1;
- (void)_willAccessKVOForKey:(id)arg1;
- (void)_removeFPListeners;
- (id)customVideoCompositor;
- (void)setVideoComposition:(id)arg1;
- (id)videoComposition;
- (id)_tracks;
- (id)_weakReference;
- (id)_stateDispatchQueue;
- (id)_cachedValueForKey:(id)arg1;
- (bool)isContentAuthorizedForPlayback;
- (bool)isApplicationAuthorizedForPlayback;
- (bool)isAuthorizationRequiredForPlayback;
- (id)_rentalPlaybackExpirationDate;
- (id)_rentalPlaybackStartedDate;
- (bool)_isRentalPlaybackStarted;
- (id)_rentalExpirationDate;
- (id)_rentalStartDate;
- (bool)_isRental;
- (void)_setExternalProtectionRequiredForPlayback:(bool)arg1;
- (id)_isExternalProtectionRequiredForPlaybackInternal;
- (bool)_isExternalProtectionRequiredForPlayback;
- (id)errorLog;
- (id)accessLog;
- (long long)_availableFileSize;
- (void)_setRampInOutInfo:(id)arg1;
- (void)_setAudibleDRMInfo:(id)arg1;
- (void)_setEQPreset:(int)arg1;
- (long long)_fileSize;
- (void)_quietlySetEQPreset:(int)arg1;
- (void)setDataYouTubeID:(id)arg1;
- (id)dataYouTubeID;
- (void)addOutput:(id)arg1;
- (void)removeOutput:(id)arg1;
- (void)_removeMetadataOutput:(id)arg1;
- (void)_removeLegibleOutput:(id)arg1;
- (void)_removeVideoOutput:(id)arg1;
- (void)_addMetadataOutput:(id)arg1;
- (void)_addLegibleOutput:(id)arg1;
- (void)_addVideoOutput:(id)arg1;
- (id)_metadataOutputsForKeys;
- (id)_legibleOutputsForKeys;
- (id)_videoOutputs;
- (void)_evaluateMetadataOutputs;
- (void)_evaluateLegibleOutputs;
- (void)_evaluateVideoOutputs;
- (id)_preferredPixelBufferAttributes;
- (id)outputs;
- (void)setMediaKind:(id)arg1;
- (id)_mediaKind;
- (void)_quietlySetMediaKind:(id)arg1;
- (id)mediaKind;
- (void)setRestrictions:(unsigned long long)arg1;
- (unsigned long long)restrictions;
- (void)_quietlySetRestrictions:(unsigned long long)arg1;
- (void)_quietlySetServiceIdentifier:(id)arg1;
- (void)setServiceIdentifier:(id)arg1;
- (id)serviceIdentifier;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 didFlushLegibleOutputWithDictionaryKey:(id)arg2;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 didOutputAttributedStrings:(id)arg2 nativeSampleBuffers:(id)arg3 atItemTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 withLegibleOutputsDictionaryKey:(id)arg5;
- (id)_legibleOutputForKey:(id)arg1;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 didFlushMetadataOutputWithDictionaryKey:(id)arg2;
- (void)_figPlaybackItem:(struct OpaqueFigPlaybackItem { }*)arg1 didOutputSampleBuffers:(id)arg2 fromTrackWithID:(int)arg3 forMetadataOutputWithDictionaryKey:(id)arg4;
- (id)_metadataOutputForKey:(id)arg1;

@end

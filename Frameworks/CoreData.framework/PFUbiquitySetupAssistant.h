/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreData.framework/CoreData
 */

@class PFUbiquityContainerIdentifier, <NSObject><NSCopying><NSCoding>, NSDictionary, PFUbiquityMigrationAssistant, NSMutableArray, NSString, NSMutableSet, NSError, PFUbiquityLocation, _PFUbiquityStack, NSMutableDictionary, PFUbiquityKnowledgeVector, NSPersistentStoreCoordinator, NSPersistentStore, PFUbiquityBaseline, PFUbiquityMigrationManager, PFUbiquitySwitchboardEntry, NSObject<OS_dispatch_semaphore>, NSURL, PFUbiquityPeerState, PFUbiquityPeerReceipt, PFUbiquityStoreMetadata;

@interface PFUbiquitySetupAssistant : NSObject  {
    NSMutableDictionary *_options;
    NSPersistentStoreCoordinator *_psc;
    NSPersistentStore *_store;
    NSString *_storeType;
    NSURL *_storeURL;
    NSURL *_actualStoreFileURL;
    NSMutableDictionary *_storeMetadataDict;
    bool_needsMetadataWrite;
    PFUbiquityKnowledgeVector *_storeKV;
    bool_ubiquityEnabled;
    <NSObject><NSCopying><NSCoding> *_ubiquityIdentityToken;
    NSURL *_ubiquityRootURL;
    NSString *_ubiquityRootSubpath;
    NSString *_ubiquityName;
    NSString *_ubiquityContainerIdentifier;
    NSString *_localPeerID;
    NSString *_modelVersionHash;
    NSString *_previousModelVersionHash;
    PFUbiquityLocation *_ubiquityRootLocation;
    PFUbiquityLocation *_localRootLocation;
    _PFUbiquityStack *_stack;
    PFUbiquityStoreMetadata *_storeMetadata;
    PFUbiquityPeerState *_localPeerState;
    PFUbiquityKnowledgeVector *_metaKV;
    PFUbiquityBaseline *_baseline;
    bool_baselineFileExistsInCloud;
    bool_hasUploadingBaseline;
    bool_monitorUploadingBaselineAsync;
    bool_didBaselineCopy;
    PFUbiquityKnowledgeVector *_baselineKV;
    bool_votedOffIsland;
    bool_reapUbiquitousLogs;
    bool_respondToBaselineRoll;
    bool_storeFileExists;
    bool_storeFileIsReadOnly;
    bool_hasStoreMetadataFile;
    bool_hasStoreMetadataEntry;
    bool_hasContainerUUID;
    bool_hasContainerUUIDInStore;
    bool_needsMetadataRecovery;
    PFUbiquityPeerReceipt *_localPeerReceipt;
    PFUbiquityKnowledgeVector *_receiptKV;
    PFUbiquityContainerIdentifier *_containerIdentifier;
    NSString *_preStoreContainerUUID;
    bool_usedExistingUUIDMapping;
    bool_hasLocalTransactionLogs;
    bool_hasMigrationOptions;
    bool_didMigrateBaseline;
    bool_storeWasMigrated;
    PFUbiquityMigrationAssistant *_migrationAssistant;
    PFUbiquityMigrationManager *_migrationManager;
    bool_replayLogsSynchronously;
    bool_useLocalAccount;
    bool_seedStore;
    NSURL *_seedStoreURL;
    bool_haveExistingUUIDMappings;
    bool_abortSetup;
    PFUbiquitySwitchboardEntry *_entry;
    bool_gotExportNotification;
    int _sideLoadLock;
    NSMutableSet *_logLocationsExportedDuringSideLoad;
    NSMutableDictionary *_gidToRid;
    NSMutableDictionary *_entityNameToGidSet;
    NSObject<OS_dispatch_semaphore> *_initialSyncSemaphore;
    int _initialSyncComplete;
    NSMutableArray *_queryLocations;
    bool_notifyAboutSetupProgress;
    long long _numSetupTries;
    unsigned long long _retryDelaySec;
    bool_failSetup;
    NSError *_failSetupError;
    bool_gotAccountChange;
    bool_cacheFilePresenterForUbiquityRoot;
}

@property(readonly) NSDictionary * options;
@property(readonly) bool ubiquityEnabled;
@property(readonly) bool needsMetadataRecovery;
@property(readonly) NSString * localPeerID;
@property(readonly) NSURL * ubiquityRootURL;
@property(readonly) PFUbiquityLocation * ubiquityRootLocation;
@property(readonly) PFUbiquityLocation * localRootLocation;
@property(readonly) PFUbiquityContainerIdentifier * containerIdentifier;
@property(readonly) bool useLocalAccount;
@property bool storeWasMigrated;
@property(readonly) NSURL * actualStoreFileURL;
@property bool abortSetup;
@property(readonly) PFUbiquityKnowledgeVector * storeKV;
@property unsigned long long retryDelaySec;
@property bool cacheFilePresenterForUbiquityRoot;
@property bool failSetup;
@property(retain) NSError * failSetupError;

+ (void)cleanUserDefaultsForStore:(id)arg1;
+ (bool)ubiquityMetadataTablesPresentInStore:(id)arg1;
+ (id)generateMachineUUIDString;
+ (id)createBaselineFromMostRecentLocation:(id)arg1 localPeerID:(id)arg2 error:(id*)arg3;
+ (bool)doBasicSanityCheckForUbiquityRootURL:(id)arg1 withError:(id*)arg2;
+ (void)setContainerIdentifierUUID:(id)arg1 forIdentityToken:(id)arg2 forStoreName:(id)arg3;
+ (id)createActualStoreURLForStoreURL:(id)arg1 localPeerID:(id)arg2 containerIdentifier:(id)arg3 andStoreName:(id)arg4;
+ (id)createDefaultLocalPeerID;
+ (id)findContainerIDForToken:(id)arg1 storeName:(id)arg2 haveExistingMappings:(bool*)arg3;
+ (void)removeUbiquityMetadataFromStore:(id)arg1;

- (id)containerIdentifier;
- (id)longDescription;
- (id)options;
- (id)init;
- (void)dealloc;
- (bool)cacheFilePresenterForUbiquityRoot;
- (id)failSetupError;
- (void)setFailSetup:(bool)arg1;
- (bool)failSetup;
- (void)setRetryDelaySec:(unsigned long long)arg1;
- (unsigned long long)retryDelaySec;
- (bool)abortSetup;
- (bool)storeWasMigrated;
- (bool)needsMetadataRecovery;
- (void)_setUbiquityRootLocation:(id)arg1 storeName:(id)arg2 localPeerID:(id)arg3 andModelVersionHash:(id)arg4;
- (bool)isInitialSyncComplete;
- (void)insertEntriesInDicitonary:(id)arg1 inBigramManagedObjectContext:(id)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inLearningDictionaryJPManagedObjectContext:(id)arg2;
- (bool)checkAndPerformMigrationForStore:(id)arg1 error:(id*)arg2;
- (bool)rewriteTransactionLogs:(id)arg1 toMatchStore:(id)arg2 error:(id*)arg3;
- (id)createSetOfLocalLogLocations:(id*)arg1;
- (bool)tryToReplaceLocalStore:(id)arg1 withStoreSideLoadedByImporter:(id)arg2;
- (void)exportedLog:(id)arg1;
- (bool)migrateMetadataRoot:(id*)arg1;
- (void)insertEntriesInDicitonary:(id)arg1 inLearningDictionaryManagedObjectContext:(id)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inUserDictionaryManagedObjectContext:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withBigramSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withPhraseLearningSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withPhraseLearningJPSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withShortcutSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withBigramSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withPhraseLearningSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withPhraseLearningJPSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withShortcutSnapshot:(id)arg2;
- (id)migrationAssistant;
- (void)initialSyncComplete;
- (bool)seedStore:(id)arg1 error:(id*)arg2;
- (bool)pruneStagingDirectoryForStore:(id)arg1 error:(id*)arg2;
- (bool)moveLocalLogFilesToUbiquityLocation:(id*)arg1;
- (bool)attemptMetadataRecoveryForStore:(id)arg1 error:(id*)arg2;
- (bool)respondToBaselineRoll:(id*)arg1;
- (bool)sideLoadStore:(id)arg1 error:(id*)arg2;
- (bool)checkKnowledgeVectorsAndBaselineWithStore:(id)arg1 error:(id*)arg2;
- (bool)initializeBaselineForStore:(id)arg1 error:(id*)arg2;
- (bool)initializeStack:(id*)arg1;
- (bool)initializeContainerIdentifierWithStore:(id)arg1 error:(id*)arg2;
- (bool)initializeReceiptFile:(id*)arg1;
- (bool)detectAndFixForkedContainer:(bool)arg1 error:(id*)arg2;
- (bool)cleanUpFromFailedSetup:(id*)arg1;
- (bool)finishSetupForStore:(id)arg1 error:(id*)arg2;
- (void)finishSetupWithRetry:(id)arg1;
- (bool)initializeStoreKnowledgeVectorFromStore:(id)arg1 error:(id*)arg2;
- (void)ubiquityIdentityTokenChanged:(id)arg1;
- (id)getCurrentUbiquityIdentityToken;
- (bool)doPostValidationInit:(id*)arg1;
- (void)setFailSetupError:(id)arg1;
- (bool)useLocalAccount;
- (id)storeKV;
- (void)setAbortSetup:(bool)arg1;
- (void)coordinatorWillRemoveStore:(id)arg1;
- (id)localRootLocation;
- (id)ubiquityRootURL;
- (bool)canReadFromUbiquityRootLocation:(id*)arg1;
- (void)setCacheFilePresenterForUbiquityRoot:(bool)arg1;
- (bool)performCoordinatorPostStoreSetup:(id)arg1 error:(id*)arg2;
- (void)setStoreWasMigrated:(bool)arg1;
- (id)actualStoreFileURL;
- (bool)ubiquityEnabled;
- (bool)validateOptionsWithError:(id*)arg1;
- (id)initWithPersistentStoreCoordinator:(id)arg1 andStoreOptions:(id)arg2 forPersistentStoreOfType:(id)arg3 atURL:(id)arg4;
- (id)ubiquityRootLocation;
- (id)localPeerID;

@end

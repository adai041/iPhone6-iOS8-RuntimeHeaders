/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UITabBarButtonLabel, UIView, UIImage, UITabBarSelectionIndicatorView, NSValue, NSMutableDictionary, UIColor, UIVisualEffectView, _UIBadgeView;

@interface UITabBarButton : UIControl  {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _hitRect;
    UIView *_info;
    UIVisualEffectView *_vibrancyEffectView;
    UITabBarButtonLabel *_label;
    _UIBadgeView *_badge;
    UITabBarSelectionIndicatorView *_selectedIndicator;
    bool_selected;
    bool_barHeight;
    bool_badgeAnimated;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _infoInsets;
    struct UIOffset { 
        double horizontal; 
        double vertical; 
    } _selectedInfoOffset;
    struct UIOffset { 
        double horizontal; 
        double vertical; 
    } _infoOffset;
    UIImage *_customSelectedIndicatorImage;
    NSValue *_labelOffsetValue;
    NSMutableDictionary *_buttonTintColorsForState;
    NSMutableDictionary *_contentTintColorsForState;
    bool_showsHighlightedState;
    bool_centerAllContents;
    Class _appearanceGuideClass;
    UIColor *_unselectedTintColor;
}

@property(setter=_setAppearanceGuideClass:) Class _appearanceGuideClass;
@property(retain) NSValue * labelOffsetValue;
@property(readonly) UITabBarButtonLabel * tabBarButtonLabel;
@property(setter=_setCenterAllContents:) bool _centerAllContents;
@property(getter=_unselectedTintColor,setter=_setUnselectedTintColor:,retain) UIColor * unselectedTintColor;
@property(setter=_setShowsHighlightedState:) bool _showsHighlightedState;
@property(getter=_isSelected,setter=_setSelected:) bool _selected;

+ (id)_defaultLabelColor;

- (void)_setCenterAllContents:(bool)arg1;
- (bool)_centerAllContents;
- (void)setLabelOffsetValue:(id)arg1;
- (id)labelOffsetValue;
- (void)_setButtonTintColor:(id)arg1 forState:(unsigned long long)arg2;
- (struct UIOffset { double x1; double x2; })_titlePositionAdjustment;
- (void)_setLabelHidden:(bool)arg1;
- (void)_setCustomSelectedIndicatorImage:(id)arg1;
- (void)_setInfoOffset:(struct UIOffset { double x1; double x2; })arg1;
- (void)_setSelectedInfoOffset:(struct UIOffset { double x1; double x2; })arg1;
- (id)_swappableImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tabBarHitRect;
- (void)_setTabBarHitRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithImage:(id)arg1 selectedImage:(id)arg2 label:(id)arg3 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4;
- (id)_selectedIndicatorView;
- (id)tabBarButtonLabel;
- (void)_setShowsHighlightedState:(bool)arg1;
- (void)_showSelectedIndicator:(bool)arg1 changeSelection:(bool)arg2;
- (void)_updateInfoFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForSelectedIndicator;
- (void)_setUnselectedTintColor:(id)arg1 forceLabelToConform:(bool)arg2;
- (id)_buttonTintColorForState:(unsigned long long)arg1;
- (bool)_showsHighlightedState;
- (void)_updateToMatchCurrentState;
- (void)_setSelected:(bool)arg1;
- (void)_updateSelectedIndicatorView;
- (void)_setUpSelectedIndicatorViewIfNeeded;
- (void)_setContentTintColor:(id)arg1 forState:(unsigned long long)arg2;
- (id)_unselectedTintColor;
- (void)_applyTabBarButtonAppearanceStorage:(id)arg1 withTaggedSelectors:(id)arg2;
- (void)_setTitlePositionAdjustment:(struct UIOffset { double x1; double x2; })arg1;
- (void)_UIAppearance_setTitlePositionAdjustment:(struct UIOffset { double x1; double x2; })arg1;
- (void)_setUnselectedTintColor:(id)arg1;
- (id)_contentTintColorForState:(unsigned long long)arg1;
- (bool)_useBarHeight;
- (void)_setBarHeight:(float)arg1;
- (void)_setBadgeAnimated:(bool)arg1;
- (void)_setBadgeValue:(id)arg1;
- (void)_badgeAnimationDidStop:(id)arg1 finished:(id)arg2;
- (void)_positionBadge;
- (bool)_isSelected;
- (void)_setAppearanceGuideClass:(Class)arg1;
- (void)_setTitleTextAttributes:(id)arg1 forState:(unsigned long long)arg2;
- (void)_UIAppearance_setTitleTextAttributes:(id)arg1 forState:(unsigned long long)arg2;
- (void)setHighlighted:(bool)arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (bool)_isFocusableElement;
- (void)_focusStateDidChange;
- (Class)_appearanceGuideClass;
- (void)setEnabled:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderSelectionRectForWindow:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)setImage:(id)arg1;
- (void)dealloc;
- (id)_scriptingInfo;

@end

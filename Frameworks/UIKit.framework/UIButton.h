/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIFont, UIView, _UIButtonMaskAnimationView, NSArray, UITapGestureRecognizer, UIImageView, NSString, UIImage, NSAttributedString, UILabel, UIColor;

@interface UIButton : UIControl <NSCoding> {
    unsigned long long _externalFlatEdge;
    struct __CFDictionary { } *_contentLookup;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _contentEdgeInsets;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _titleEdgeInsets;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _imageEdgeInsets;
    UIImageView *_backgroundView;
    UIImageView *_imageView;
    UILabel *_titleView;
    bool_initialized;
    unsigned long long _lastDrawingControlState;
    UITapGestureRecognizer *_selectGestureRecognizer;
    struct { 
        unsigned int reversesTitleShadowWhenHighlighted : 1; 
        unsigned int adjustsImageWhenHighlighted : 1; 
        unsigned int adjustsImageWhenDisabled : 1; 
        unsigned int autosizeToFit : 1; 
        unsigned int disabledDimsImage : 1; 
        unsigned int showsTouchWhenHighlighted : 1; 
        unsigned int buttonType : 8; 
        unsigned int shouldHandleScrollerMouseEvent : 1; 
        unsigned int titleFrozen : 1; 
    } _buttonFlags;
    _UIButtonMaskAnimationView *_maskAnimationView;
    UIView *_selectionView;
    UIFont *_lazyTitleViewFont;
    NSArray *_contentConstraints;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _internalTitlePaddingInsets;
}

@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentEdgeInsets;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } titleEdgeInsets;
@property bool reversesTitleShadowWhenHighlighted;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } imageEdgeInsets;
@property bool adjustsImageWhenHighlighted;
@property bool adjustsImageWhenDisabled;
@property bool showsTouchWhenHighlighted;
@property(retain) UIColor * tintColor;
@property(readonly) long long buttonType;
@property(retain,readonly) NSString * currentTitle;
@property(retain,readonly) UIColor * currentTitleColor;
@property(retain,readonly) UIColor * currentTitleShadowColor;
@property(retain,readonly) UIImage * currentImage;
@property(retain,readonly) UIImage * currentBackgroundImage;
@property(retain,readonly) NSAttributedString * currentAttributedTitle;
@property(retain,readonly) UILabel * titleLabel;
@property(retain,readonly) UIImageView * imageView;
@property(retain,readonly) UIColor * _currentImageColor;
@property(setter=_setExternalFlatEdge:) unsigned long long _externalFlatEdge;
@property(setter=_setContentConstraints:,copy) NSArray * _contentConstraints;
@property(setter=_setInternalTitlePaddingInsets:) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _internalTitlePaddingInsets;

+ (id)_defaultImageColorForState:(unsigned long long)arg1 button:(id)arg2;
+ (id)_defaultTitleColorForState:(unsigned long long)arg1 button:(id)arg2;
+ (id)_defaultBackgroundImageForType:(long long)arg1 andState:(unsigned long long)arg2;
+ (id)_xImage;
+ (id)_minusImage;
+ (id)_checkmarkImage;
+ (id)_questionMarkImage;
+ (id)_exclamationMarkImage;
+ (id)_infoDarkImage;
+ (id)_plusImage;
+ (id)_detailDisclosureImage;
+ (id)_infoLightImage;
+ (id)_selectedIndicatorImage;
+ (void)_setVisuallyHighlighted:(bool)arg1 forViews:(id)arg2 initialPress:(bool)arg3 baseAlpha:(double)arg4;
+ (id)_defaultImageForType:(long long)arg1 andState:(unsigned long long)arg2;
+ (id)_defaultNormalTitleShadowColor;
+ (id)_defaultNormalTitleColor;
+ (void)_setVisuallyHighlighted:(bool)arg1 forViews:(id)arg2 initialPress:(bool)arg3;
+ (id)buttonWithType:(long long)arg1;

- (void)_setInternalTitlePaddingInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_internalTitlePaddingInsets;
- (id)_contentConstraints;
- (void)_setAttributedTitle:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setImageColor:(id)arg1 forStates:(unsigned long long)arg2;
- (long long)_drawingStyleForState:(unsigned long long)arg1;
- (void)_setDrawingStyle:(long long)arg1 forState:(unsigned long long)arg2;
- (void)_setLetterpressStyle:(id)arg1 forState:(unsigned long long)arg2;
- (void)crossfadeToImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)_setShouldHandleScrollerMouseEvent:(bool)arg1;
- (void)setTitleShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })titleShadowOffset;
- (id)currentAttributedTitle;
- (id)currentBackgroundImage;
- (id)currentTitleShadowColor;
- (id)_currentImageColor;
- (id)currentTitleColor;
- (void)setAttributedTitle:(id)arg1 forState:(unsigned long long)arg2;
- (void)_setExternalFlatEdge:(unsigned long long)arg1;
- (void)setImageEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setReversesTitleShadowWhenHighlighted:(bool)arg1;
- (bool)reversesTitleShadowWhenHighlighted;
- (id)_externalImageColorForState:(unsigned long long)arg1;
- (bool)_shouldDefaultToTemplatesForImageViewBackground:(bool)arg1;
- (long long)_externalDrawingStyleForState:(unsigned long long)arg1;
- (long long)_drawingStyleForStroke:(double)arg1;
- (void)_setDrawingStroke:(double)arg1 forState:(unsigned long long)arg2;
- (double)_drawingStrokeForStyle:(long long)arg1;
- (void)_setBackground:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setTitle:(id)arg1 forStates:(unsigned long long)arg2;
- (id)_newLabelWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_newImageViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_titleShadowOffset;
- (void)_setupPressednessForState:(unsigned long long)arg1;
- (void)_updateSelectionViewForState:(unsigned long long)arg1;
- (bool)_shouldUpdatePressedness;
- (void)_setupDrawingStyleForState:(unsigned long long)arg1;
- (void)_layoutTitleView;
- (void)_layoutImageView;
- (void)_layoutBackgroundImageView;
- (void)_updateBackgroundImageView;
- (id)_letterpressStyleForState:(unsigned long long)arg1;
- (void)_beginTitleAnimation;
- (bool)adjustsImageWhenDisabled;
- (bool)showsTouchWhenHighlighted;
- (bool)adjustsImageWhenHighlighted;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_highlightRectForTextRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_highlightRectForImageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setupTitleViewRequestingLayout:(bool)arg1;
- (bool)_likelyToHaveTitle;
- (id)_titleOrImageViewForBaselineLayout;
- (void)_setContentHuggingPriorities:(struct CGSize { double x1; double x2; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })imageEdgeInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 calculatePositionForEmptyTitle:(bool)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })titleEdgeInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_combinedContentPaddingInsets;
- (id)_imageColorForState:(unsigned long long)arg1;
- (id)_attributedTitleForState:(unsigned long long)arg1;
- (id)_shadowColorForState:(unsigned long long)arg1;
- (id)_titleColorForState:(unsigned long long)arg1;
- (id)_titleForState:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_highlightBounds;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_outsetInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (double)_drawingStrokeForState:(unsigned long long)arg1;
- (id)_externalBorderColorForState:(unsigned long long)arg1;
- (id)_externalTitleColorForState:(unsigned long long)arg1;
- (void)_updateMaskState;
- (id)_fadeOutAnimationWithKeyPath:(id)arg1;
- (double)_borderWidthForState:(unsigned long long)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_transitionAnimationWithKeyPath:(id)arg1;
- (void)_prepareMaskAnimationViewIfNecessary;
- (id)_borderColorForState:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_highlightBoundsForDrawingStyle;
- (unsigned long long)_externalFlatEdge;
- (bool)_imageNeedsCompositingModeWhenSelected;
- (bool)_textNeedsCompositingModeWhenSelected;
- (double)_selectedIndicatorAlpha;
- (id)_selectedIndicatorViewWithImage:(id)arg1;
- (bool)_isExternalRoundedRectButtonWithPressednessState;
- (bool)_hasHighlightColor;
- (void)_updateImageView;
- (id)_imageForState:(unsigned long long)arg1 usesImageForNormalState:(bool*)arg2;
- (void)_selectGestureChanged:(id)arg1;
- (bool)_isExternalRoundedRectButton;
- (bool)_hasDrawingStyle;
- (void)_setupImageView;
- (void)_setupTitleView;
- (bool)_canHaveTitle;
- (struct CGPoint { double x1; double x2; })pressFeedbackPosition;
- (bool)autosizesToFit;
- (void)_installSelectGestureRecognizer;
- (void)_updateEffectsForImageView:(id)arg1 background:(bool)arg2;
- (void)_uninstallSelectGestureRecognizer;
- (id)_archivableContent:(id*)arg1;
- (void)_takeContentFromArchivableContent:(id)arg1;
- (void)_applyAppropriateChargeForButtonType;
- (void)setShowsTouchWhenHighlighted:(bool)arg1;
- (void)_invalidateContentConstraints;
- (void)_setContentConstraints:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentEdgeInsets;
- (id)attributedTitleForState:(unsigned long long)arg1;
- (id)titleShadowColorForState:(unsigned long long)arg1;
- (id)titleColorForState:(unsigned long long)arg1;
- (void)_setShadowColor:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setTitleColor:(id)arg1 forStates:(unsigned long long)arg2;
- (id)_setupBackgroundView;
- (id)_backgroundForState:(unsigned long long)arg1 usesBackgroundForNormalState:(bool*)arg2;
- (long long)buttonType;
- (void)_titleAttributesChanged;
- (void)setShowPressFeedback:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_layoutDebuggingTitle;
- (long long)lineBreakMode;
- (void)_setContent:(id)arg1 forState:(unsigned long long)arg2;
- (id)_contentForState:(unsigned long long)arg1;
- (id)currentImage;
- (id)currentTitle;
- (void)setAutosizesToFit:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backgroundRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)viewForBaselineLayout;
- (id)imageView;
- (void)_setButtonType:(long long)arg1;
- (void)updateConstraints;
- (double)_highlightCornerRadius;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_clippedHighlightBounds;
- (void)setSelected:(bool)arg1;
- (id)font;
- (bool)_isModernButton;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_pathImageEdgeInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_pathTitleEdgeInsets;
- (void)_sendSetNeedsLayoutToSuperviewOnTitleAnimationCompletionIfNecessary;
- (void)setContentEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)backgroundImageForState:(unsigned long long)arg1;
- (id)_createPreparedImageViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)imageForState:(unsigned long long)arg1;
- (void)setDisabledDimsImage:(bool)arg1;
- (void)setContentVerticalAlignment:(long long)arg1;
- (void)setContentHorizontalAlignment:(long long)arg1;
- (void)setImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setTitle:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setTitleShadowColor:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setTitleFrozen:(bool)arg1;
- (void)_setFont:(id)arg1;
- (bool)_isTitleFrozen;
- (void)setTitleEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setImageColor:(id)arg1 forState:(unsigned long long)arg2;
- (void)setBackgroundImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setBackgroundImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setAdjustsImageWhenDisabled:(bool)arg1;
- (void)setAdjustsImageWhenHighlighted:(bool)arg1;
- (void)setTitleColor:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setTitleShadowColor:(id)arg1 forState:(unsigned long long)arg2;
- (id)_imageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectedIndicatorBounds;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 deferLayout:(bool)arg2;
- (id)titleLabel;
- (void)_setTitleShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setTitleColor:(id)arg1 forState:(unsigned long long)arg2;
- (void)setHighlighted:(bool)arg1;
- (id)_titleView;
- (void)_updateTitleView;
- (void)_setLineBreakMode:(long long)arg1;
- (id)titleForState:(unsigned long long)arg1;
- (void)setImage:(id)arg1 forState:(unsigned long long)arg2;
- (bool)_alwaysHandleScrollerMouseEvent;
- (void)_didChangeFromIdiom:(long long)arg1 onScreen:(id)arg2 traverseHierarchy:(bool)arg3;
- (void)_willMoveToWindow:(id)arg1;
- (bool)_isFocusableElement;
- (void)tintColorDidChange;
- (void)_focusStateDidChange;
- (void)setTintColor:(id)arg1;
- (void)invalidateIntrinsicContentSize;
- (void)setEnabled:(bool)arg1;
- (long long)_lineBreakMode;
- (id)_font;
- (void)setLineBreakMode:(long long)arg1;
- (id)image;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)setFont:(id)arg1;
- (long long)_buttonType;
- (id)title;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)_backgroundView;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)setTitle:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)_populateArchivedSubviews:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTitle:(id)arg1 forState:(unsigned long long)arg2;
- (id)_scriptingInfo;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isAccessibilityElementByDefault;
- (unsigned long long)defaultAccessibilityTraits;

@end

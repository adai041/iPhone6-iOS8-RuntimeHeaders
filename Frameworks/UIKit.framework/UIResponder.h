/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIView, NSString, NSArray, UIResponder<UITextInput>, UITextInputMode, NSUserActivity, UIResponder, UIView<UITextInputPrivate>, UIInputViewController, NSUndoManager;

@interface UIResponder : NSObject <UITextInput_Internal, UITextInputAdditions, _UIStateRestorationContinuation> {
}

@property(copy) NSString * restorationIdentifier;
@property(getter=isEditable,readonly) bool editable;
@property(getter=isEditing,readonly) bool editing;
@property(getter=_caretRect,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } caretRect;
@property(getter=_proxyTextInput,readonly) UIResponder<UITextInput> * __content;
@property(readonly) UIView<UITextInputPrivate> * _textSelectingContainer;
@property(retain) NSUserActivity * userActivity;
@property(readonly) UIResponder * _editingDelegate;
@property(readonly) UIResponder * _responderForEditing;
@property(readonly) NSArray * keyCommands;
@property(retain,readonly) UIView * inputView;
@property(retain,readonly) UIView * inputAccessoryView;
@property(retain,readonly) UIInputViewController * inputViewController;
@property(retain,readonly) UIInputViewController * inputAccessoryViewController;
@property(retain,readonly) UITextInputMode * textInputMode;
@property(retain,readonly) NSString * textInputContextIdentifier;
@property(readonly) NSUndoManager * undoManager;

+ (void)clearTextInputContextIdentifier:(id)arg1;
+ (void)_cleanupStateRestorationObjectIdentifierTrackingTables;
+ (void)_stopDeferredTrackingObjectsWithIdentifiers;
+ (void)_finishStateRestoration;
+ (void)_prepareForSecondPassStateRestoration;
+ (void)_setRestoredIdentifierPathForObject:(id)arg1 identifierPath:(id)arg2;
+ (id)objectWithRestorationIdentifierPath:(id)arg1;
+ (void)_updateStateRestorationIdentifierMap;
+ (void)_cleanupAllStateRestorationTables;
+ (void)_startDeferredTrackingObjectsWithIdentifiers;

- (void)_tagAsRestorableResponder;
- (void)gestureChanged:(struct __GSEvent { }*)arg1;
- (void)gestureStarted:(struct __GSEvent { }*)arg1;
- (void)scrollWheel:(struct __GSEvent { }*)arg1;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (void)motionCancelled:(long long)arg1 withEvent:(id)arg2;
- (void)motionBegan:(long long)arg1 withEvent:(id)arg2;
- (void)_overrideInputAccessoryViewNextResponderWithResponder:(id)arg1;
- (void)_overrideInputViewNextResponderWithResponder:(id)arg1;
- (id)_targetForAction:(SEL)arg1 withSender:(id)arg2 canPerformActionBlock:(id)arg3;
- (bool)canResignFirstResponder;
- (void)_finishResignFirstResponder;
- (id)_editingDelegate;
- (bool)_isRootForKeyResponderCycle;
- (void)_clearRestorableResponderStatus;
- (void)_clearOverrideNextResponder;
- (void)_clearBecomeFirstResponderWhenCapable;
- (id)_previousKeyResponder;
- (id)_nextKeyResponder;
- (bool)canBecomeFirstResponder;
- (bool)_containsResponder:(id)arg1;
- (id)_nextResponderOverride;
- (bool)_containedInAbsoluteResponderChain;
- (bool)isFirstResponder;
- (void)gestureEnded:(struct __GSEvent { }*)arg1;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)motionEnded:(long long)arg1 withEvent:(id)arg2;
- (bool)becomeFirstResponder;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (bool)resignFirstResponder;
- (id)undoManager;
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)_responderForEditing;
- (id)firstResponder;
- (id)nextResponder;
- (void)dealloc;
- (void)reloadInputViewsWithoutReset;
- (id)inputAccessoryViewController;
- (id)textInputContextIdentifier;
- (id)inputViewController;
- (id)inputAccessoryView;
- (id)inputView;
- (void)reloadInputViews;
- (id)textInputMode;
- (id)keyCommands;
- (void)_didChangeToFirstResponder:(id)arg1;
- (id)_responderSelectionImage;
- (bool)_isPinningInputViews;
- (void)_becomeFirstResponderAndMakeVisible;
- (bool)_requiresKeyboardResetOnReload;
- (bool)_requiresKeyboardWindowWhenFirstResponder;
- (id)_primaryContentResponder;
- (void)_completeForwardingTouches:(id)arg1 phase:(long long)arg2 event:(id)arg3 index:(unsigned long long)arg4;
- (id)_keyboardResponder;
- (void)_resignFirstResponder;
- (void)_becomeFirstResponder;
- (bool)_canChangeFirstResponder:(id)arg1 toResponder:(id)arg2;
- (id)_keyCommands;
- (bool)_isViewController;
- (void)_endPinningInputViews;
- (void)_beginPinningInputViews;
- (bool)_canBecomeFirstResponder;
- (void)_controlTouchEnded:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchMoved:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchBegan:(id)arg1 withEvent:(id)arg2;
- (bool)_isTransitioningFromView:(id)arg1;
- (bool)_requiresKeyboardWhenFirstResponder;
- (id)_responderWindow;
- (bool)_resignIfContainsFirstResponder;
- (id)nextFirstResponder;
- (id)_nextViewControllerInResponderChain;
- (bool)_disableAutomaticKeyboardUI;
- (bool)_disableAutomaticKeyboardBehavior;
- (id)_responderSelectionContainerViewForResponder:(id)arg1;
- (void)_moveWithEvent:(id)arg1;
- (void)_windowBecameKey;
- (void)_windowResignedKey;
- (void)_completeForwardingTouches:(id)arg1 phase:(long long)arg2 event:(id)arg3;
- (id)_window;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderSelectionRectForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderExternalTouchRectForWindow:(id)arg1;
- (id)_showServiceForText:(id)arg1 type:(long long)arg2 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inView:(id)arg4;
- (bool)_canShowTextServices;
- (void)_physicalButtonsCancelled:(id)arg1 withEvent:(id)arg2;
- (void)_physicalButtonsEnded:(id)arg1 withEvent:(id)arg2;
- (void)_handleKeyEvent:(struct __GSEvent { }*)arg1;
- (void)_handleKeyUIEvent:(id)arg1;
- (id)_keyCommandForEvent:(id)arg1;
- (id)_deepestUnambiguousResponder;
- (void)_physicalButtonsBegan:(id)arg1 withEvent:(id)arg2;
- (bool)_canBecomeFirstResponderWhenPossible;
- (id)_responderForBecomeFirstResponder;
- (bool)_supportsBecomeFirstResponderWhenPossible;
- (bool)_becomeFirstResponderWhenPossible;
- (id)_firstResponder;
- (void)_setFirstResponder:(id)arg1;
- (id)_userActivity;
- (void)setUserActivity:(id)arg1;
- (id)userActivity;
- (void)restoreUserActivityState:(id)arg1;
- (void)updateUserActivityState:(id)arg1;
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;
- (id)_rangeOfLineEnclosingPosition:(id)arg1;
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;
- (bool)_hasMarkedTextOrRangedSelection;
- (bool)_selectionAtWordStart;
- (void)_phraseBoundaryGesture:(id)arg1;
- (id)_setSelectionRangeWithHistory:(id)arg1;
- (id)_setHistory:(id)arg1 withExtending:(bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(bool)arg4;
- (bool)_isEmptySelection;
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (id)_keyInput;
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;
- (int)_indexForTextPosition:(id)arg1;
- (id)_fullRange;
- (id)_selectableText;
- (bool)_usesAsynchronousProtocol;
- (bool)_hasMarkedText;
- (id)_newPhraseBoundaryGestureRecognizer;
- (id)_textColorForCaretSelection;
- (id)_fontForCaretSelection;
- (long long)_selectionAffinity;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(bool)arg4;
- (bool)_selectionAtDocumentEnd;
- (bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(bool)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_nsrangeForTextRange:(id)arg1;
- (bool)_selectionAtDocumentStart;
- (void)_selectAll;
- (void)_replaceCurrentWordWithText:(id)arg1;
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_lastRectForRange:(id)arg1;
- (id)_fullText;
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;
- (id)_rangeOfEnclosingWord:(id)arg1;
- (unsigned int)_characterAfterCaretSelection;
- (id)_wordContainingCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (void)_deleteForwardAndNotify:(bool)arg1;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (void)_expandSelectionToBackwardDeletionCluster;
- (void)_moveCurrentSelection:(int)arg1;
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;
- (unsigned int)_characterBeforeCaretSelection;
- (void)_setGestureRecognizers;
- (void)_unmarkText;
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_deleteToEndOfLine;
- (void)_deleteToStartOfLine;
- (void)_deleteByWord;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (void)_setCaretSelectionAtEndOfSelection;
- (void)_extendCurrentSelection:(int)arg1;
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedNSRange;
- (id)_proxyTextInput;
- (id)_textSelectingContainer;
- (long long)selectionAffinity;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_caretRect;
- (id)_asTextSelection;
- (void)endSelectionChange;
- (void)beginSelectionChange;
- (id)textInputView;
- (id)interactionAssistant;
- (bool)isEditing;
- (bool)isEditable;
- (bool)_usesDeemphasizedTextAppearance;
- (void)setRestorationIdentifier:(id)arg1;
- (id)_restorationIdentifierPath;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (id)restorationIdentifier;
- (void)_rebuildStateRestorationIdentifierPath;

@end

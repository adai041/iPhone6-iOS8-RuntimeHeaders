/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIColor, NSMutableDictionary, UIImageView, NSTimer, UIButton;

@interface UIStepper : UIControl  {
    bool_isRtoL;
    UIImageView *_middleView;
    UIButton *_plusButton;
    UIButton *_minusButton;
    NSTimer *_repeatTimer;
    long long _repeatCount;
    NSMutableDictionary *_dividerImages;
    bool_continuous;
    bool_autorepeat;
    bool_wraps;
    double _value;
    double _minimumValue;
    double _maximumValue;
    double _stepValue;
}

@property(getter=isContinuous) bool continuous;
@property bool autorepeat;
@property bool wraps;
@property double value;
@property double minimumValue;
@property double maximumValue;
@property double stepValue;
@property(retain) UIColor * tintColor;


- (void)setAutorepeat:(bool)arg1;
- (bool)autorepeat;
- (double)stepValue;
- (id)decrementImageForState:(unsigned long long)arg1;
- (id)incrementImageForState:(unsigned long long)arg1;
- (void)setStepValue:(double)arg1;
- (void)setDividerImage:(id)arg1 forLeftSegmentState:(unsigned long long)arg2 rightSegmentState:(unsigned long long)arg3;
- (void)_setDecrementImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)_setIncrementImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)_stopTimer;
- (void)_updateCount:(id)arg1;
- (void)_updateHighlightingAtPoint:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)_startTimer;
- (id)dividerImageForLeftSegmentState:(unsigned long long)arg1 rightSegmentState:(unsigned long long)arg2;
- (void)_updateDividerImageForButtonState;
- (void)setDecrementImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setIncrementImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)_setDividerImage:(id)arg1 forLeftSegmentState:(unsigned long long)arg2 rightSegmentState:(unsigned long long)arg3;
- (void)_setBackgroundImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)_updateButtonEnabled;
- (void)_commonStepperInit;
- (void)setWraps:(bool)arg1;
- (bool)wraps;
- (void)_updateImages;
- (void)setMaximumValue:(double)arg1;
- (void)setMinimumValue:(double)arg1;
- (void)setContinuous:(bool)arg1;
- (bool)isContinuous;
- (double)maximumValue;
- (double)minimumValue;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (id)backgroundImageForState:(unsigned long long)arg1;
- (void)setBackgroundImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setTintColor:(id)arg1;
- (double)value;
- (void)setValue:(double)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)layoutSubviews;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (void)_populateArchivedSubviews:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end

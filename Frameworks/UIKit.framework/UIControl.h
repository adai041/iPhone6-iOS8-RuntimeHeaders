/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSMutableArray;

@interface UIControl : UIView  {
    NSMutableArray *_targetActions;
    struct CGPoint { 
        double x; 
        double y; 
    } _previousPoint;
    double _downTime;
    struct { 
        unsigned int disabled : 1; 
        unsigned int tracking : 1; 
        unsigned int touchInside : 1; 
        unsigned int touchDragged : 1; 
        unsigned int requiresDisplayOnTracking : 1; 
        unsigned int highlighted : 1; 
        unsigned int dontHighlightOnTouchDown : 1; 
        unsigned int delayActions : 1; 
        unsigned int allowActionsToQueue : 1; 
        unsigned int pendingUnhighlight : 1; 
        unsigned int selected : 1; 
        unsigned int verticalAlignment : 2; 
        unsigned int horizontalAlignment : 2; 
        unsigned int wasLastHighlightSuccessful : 1; 
        unsigned int touchHasHighlighted : 1; 
    } _controlFlags;
}

@property(getter=isEnabled) bool enabled;
@property(getter=isSelected) bool selected;
@property(getter=isHighlighted) bool highlighted;
@property long long contentVerticalAlignment;
@property long long contentHorizontalAlignment;
@property(readonly) unsigned long long state;
@property(getter=isTracking,readonly) bool tracking;
@property(getter=isTouchInside,readonly) bool touchInside;


- (void)removeTarget:(id)arg1 forEvents:(int)arg2;
- (void)addTarget:(id)arg1 action:(SEL)arg2 forEvents:(int)arg3;
- (bool)hasOneOrMoreTargets;
- (void)setRequiresDisplayOnTracking:(bool)arg1;
- (bool)touchDragged;
- (bool)_touchHasHighlighted;
- (bool)_wasLastHighlightSuccessful;
- (void)_sendDelayedActions;
- (void)_delayActions;
- (void)_setHighlightOnMouseDown:(bool)arg1;
- (bool)_hasActionForEventMask:(int)arg1;
- (double)_highlightCornerRadius;
- (id)actionsForTarget:(id)arg1 forControlEvent:(unsigned long long)arg2;
- (unsigned long long)allControlEvents;
- (id)allTargets;
- (long long)contentHorizontalAlignment;
- (long long)contentVerticalAlignment;
- (void)removeTarget:(id)arg1 action:(SEL)arg2 forControlEvents:(unsigned long long)arg3;
- (void)sendAction:(SEL)arg1 to:(id)arg2 forEvent:(id)arg3;
- (void)_sendDelayedActions:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_clippedHighlightBounds;
- (void)_setTouchHasHighlighted:(bool)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)isTouchInside;
- (bool)pointMostlyInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)shouldTrack;
- (bool)requiresDisplayOnTracking;
- (void)_setLastHighlightSuccessful:(bool)arg1;
- (void)_unhighlight;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)_sendActionsForEvents:(int)arg1 withEvent:(id)arg2;
- (void)_cancelDelayedActions;
- (void)setTracking:(bool)arg1;
- (void)setSelected:(bool)arg1;
- (bool)isSelected;
- (bool)isHighlighted;
- (void)setContentVerticalAlignment:(long long)arg1;
- (void)setContentHorizontalAlignment:(long long)arg1;
- (void)sendActionsForControlEvents:(unsigned long long)arg1;
- (void)setHighlighted:(bool)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (bool)canBecomeFirstResponder;
- (bool)isEnabled;
- (void)setEnabled:(bool)arg1;
- (bool)cancelMouseTracking;
- (bool)cancelTouchTracking;
- (bool)isTracking;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (unsigned long long)state;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)addTarget:(id)arg1 action:(SEL)arg2 forControlEvents:(unsigned long long)arg3;
- (void)_connectInterfaceBuilderEventConnection:(id)arg1;

@end

/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIKeyboardEmojiGraphics : NSObject  {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _imageRect;
    struct UIKBTheme { } *_categoryTheme;
    struct UIKBTheme { } *_categorySelectedTheme;
    struct UIKBTheme { } *_controlTheme;
    struct UIKBTheme { } *_controlPressedTheme;
    struct UIKBTheme { } *_dividerTheme;
    struct UIKBTheme { } *_darkDividerTheme;
    struct UIKBTheme { } *_selectedDividerTheme;
    struct UIKBTheme { } *_backgroundTheme;
    struct CGColor { } *_selectedDividerStart;
    struct CGColor { } *_symbolColor;
    struct CGGradient { } *_darkDividerGradient;
    struct CGGradient { } *_selectedGradient;
    struct CGGradient { } *_selectedDividerGradient;
    struct CGGradient { } *_backgroundGradient;
}

+ (id)emojiFontAttributesForPortrait:(bool)arg1;
+ (bool)isLandscape;
+ (bool)boldText;
+ (double)optionalDescriptionPadding:(bool)arg1;
+ (double)emojiPageControlYOffset:(bool)arg1;
+ (id)pressIndicatorViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 whiteKeyboard:(bool)arg2;
+ (id)imageWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 name:(id)arg2 pressed:(bool)arg3;
+ (struct CGPoint { double x1; double x2; })margin:(bool)arg1;
+ (struct CGSize { double x1; double x2; })emojiSize:(bool)arg1;
+ (struct CGPoint { double x1; double x2; })padding:(bool)arg1;
+ (unsigned char)colCount:(bool)arg1;
+ (unsigned char)rowCount:(bool)arg1;
+ (id)emojiFontAttributes;
+ (id)sharedInstance;

- (id)categoryKeyGenerator:(bool)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)keyImageWithDisplayString:(id)arg1 state:(int)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 fontSize:(double)arg4;
- (id)emojiPressedGenerator:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)backgroundGradientGenerator:(id)arg1;
- (id)pageIndicatorCurrentGenerator:(id)arg1;
- (id)categorySymbolsGenerator:(id)arg1;
- (id)categoryPlacesGenerator:(id)arg1;
- (id)categoryObjectsGenerator:(id)arg1;
- (id)categoryNatureGenerator:(id)arg1;
- (id)categoryPeopleGenerator:(id)arg1;
- (id)categoryRecentsGenerator:(id)arg1;
- (id)selectedDividerGenerator:(id)arg1;
- (id)darkDividerGenerator:(id)arg1;
- (id)dividerGenerator:(id)arg1;
- (id)keyImageWithDisplayString:(id)arg1 state:(int)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 fontSize:(double)arg4 offset:(struct CGPoint { double x1; double x2; })arg5;
- (struct UIKBTheme { }*)createProtoThemeForKey:(id)arg1 keyboard:(id)arg2 state:(int)arg3;
- (id)protoKeyboard;
- (id)protoKeyWithDisplayString:(id)arg1;
- (id)pageIndicatorGenerator:(id)arg1;
- (id)categoryWithSymbol:(id)arg1 pressed:(id)arg2;
- (id)dividerWithTheme:(struct UIKBTheme { }*)arg1;
- (void)drawTopEdgeInContext:(struct CGContext { }*)arg1 withTheme:(struct UIKBTheme { }*)arg2;
- (id)generateImageWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 name:(id)arg2 pressed:(bool)arg3;
- (void)releaseThemes;
- (void)initializeThemes;
- (id)init;
- (void)dealloc;

@end

/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSArray, NSMutableDictionary, <UINavigationControllerDelegate><UIImagePickerControllerDelegate>, UIView;

@interface UIImagePickerController : UINavigationController <NSCoding> {
    long long _sourceType;
    id _image;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _cropRect;
    NSArray *_mediaTypes;
    NSMutableDictionary *_properties;
    int _previousStatusBarStyle;
    bool_previousStatusBarHidden;
    struct { 
        unsigned int visible : 1; 
        unsigned int isCleaningUp : 1; 
        unsigned int savingOptions : 3; 
        unsigned int didRevertStatusBar : 1; 
    } _imagePickerFlags;
}

@property <UINavigationControllerDelegate><UIImagePickerControllerDelegate> * delegate;
@property long long sourceType;
@property(copy) NSArray * mediaTypes;
@property bool allowsEditing;
@property bool allowsImageEditing;
@property double videoMaximumDuration;
@property long long videoQuality;
@property bool showsCameraControls;
@property(retain) UIView * cameraOverlayView;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } cameraViewTransform;
@property long long cameraCaptureMode;
@property long long cameraDevice;
@property long long cameraFlashMode;

+ (bool)isFlashAvailableForCameraDevice:(long long)arg1;
+ (id)availableCaptureModesForCameraDevice:(long long)arg1;
+ (id)availableMediaTypesForSourceType:(long long)arg1;
+ (bool)_reviewCapturedItems;
+ (bool)isCameraDeviceAvailable:(long long)arg1;
+ (bool)_isMediaTypeAvailable:(id)arg1 forSource:(long long)arg2;
+ (bool)isSourceTypeAvailable:(long long)arg1;

- (void)_imagePickerDidCompleteWithInfoArray:(id)arg1;
- (bool)_didRevertStatusBar;
- (void)setCameraFlashMode:(long long)arg1;
- (long long)cameraFlashMode;
- (long long)cameraCaptureMode;
- (void)setCameraDevice:(long long)arg1;
- (long long)cameraDevice;
- (void)stopVideoCapture;
- (bool)startVideoCapture;
- (void)takePicture;
- (void)setCameraViewTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })cameraViewTransform;
- (void)setCameraOverlayView:(id)arg1;
- (id)cameraOverlayView;
- (void)setShowsCameraControls:(bool)arg1;
- (bool)showsCameraControls;
- (unsigned long long)_imagePickerSavingOptions;
- (void)_setImagePickerSavingOptions:(unsigned long long)arg1;
- (id)_properties;
- (void)_setProperties:(id)arg1;
- (void)setVideoQuality:(long long)arg1;
- (long long)videoQuality;
- (void)setVideoMaximumDuration:(double)arg1;
- (double)videoMaximumDuration;
- (void)setAllowsEditing:(bool)arg1;
- (bool)allowsEditing;
- (void)setAllowsImageEditing:(bool)arg1;
- (bool)allowsImageEditing;
- (void)_setAllowsMultipleSelection:(bool)arg1;
- (bool)_allowsMultipleSelection;
- (id)mediaTypes;
- (void)setMediaTypes:(id)arg1;
- (id)_initWithSourceImageData:(id)arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_imagePickerDidCompleteWithInfo:(id)arg1;
- (void)_imagePickerDidCancel;
- (void)_autoDismiss;
- (id)_createInitialController;
- (void)setSourceType:(long long)arg1;
- (void)_removeAllChildren;
- (bool)_isCameraCaptureModeValid:(long long)arg1;
- (id)_cameraViewController;
- (bool)_sourceTypeIsCamera;
- (void)_initializeProperties;
- (void)_setValue:(id)arg1 forProperty:(id)arg2;
- (void)_setupControllersForCurrentMediaTypes;
- (void)_updateCameraCaptureMode;
- (void)_setupControllersForCurrentSourceType;
- (void)setCameraCaptureMode:(long long)arg1;
- (bool)_allowsImageEditing;
- (void)_setAllowsImageEditing:(bool)arg1;
- (long long)sourceType;
- (id)_valueForProperty:(id)arg1;
- (struct CGSize { double x1; double x2; })_adjustedContentSizeForPopover:(struct CGSize { double x1; double x2; })arg1;
- (bool)_isSupportedInterfaceOrientation:(long long)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillUnload;
- (void)_populateArchivedChildViewControllers:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (id)init;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;

@end

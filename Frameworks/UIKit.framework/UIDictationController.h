/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSTimer, UIAlertView, NSArray, AFDictationConnection, NSString, AFPreferences, CADisplayLink, UIDictationStreamingOperations, AFDictationOptions, NSMutableArray, UIKeyboardInputMode;

@interface UIDictationController : NSObject <_UITouchPhaseChangeDelegate> {
    AFDictationConnection *_connection;
    AFDictationOptions *_options;
    AFPreferences *_preferences;
    NSArray *_availableLanguages;
    NSTimer *_recordingLimitTimer;
    void *_callCenterFrameworkFileHandle;
    id _callCenter;
    void *_facetimeCallFrameworkFileHandle;
    id _facetimeCallManager;
    bool_wasDisabledDueToTelephonyActivity;
    UIAlertView *_dictationAvailableSoonAlert;
    bool_connectionWasAlreadyAliveForStatisticsLogging;
    UIDictationStreamingOperations *_streamingOperations;
    NSString *_language;
    bool_recievingResults;
    bool_streamingAnimationActive;
    double _lastAnimationUpdateTimeStamp;
    CADisplayLink *_streamingAnimationDisplayLink;
    boolcancelledByWaitingForLocalResults;
    bool_updatingDocument;
    booldictationStartedFromGesture;
    bool_performingStreamingEditingOperation;
    bool_discardNextHypothesis;
    bool_hasPreheated;
    NSMutableArray *_pendingEdits;
    NSString *_previousHypothesis;
    NSString *_lastHypothesis;
    NSString *_targetHypothesis;
    UIKeyboardInputMode *_inputModeThatInvokedDictation;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    } _insertionRange;
}

@property(retain) NSMutableArray * pendingEdits;
@property bool performingStreamingEditingOperation;
@property(copy) NSString * previousHypothesis;
@property(copy) NSString * lastHypothesis;
@property(copy) NSString * targetHypothesis;
@property bool discardNextHypothesis;
@property struct _NSRange { unsigned long long x1; unsigned long long x2; } insertionRange;
@property bool hasPreheated;
@property bool dictationStartedFromGesture;
@property(retain) UIKeyboardInputMode * inputModeThatInvokedDictation;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (id)stringForViewMode:(int)arg1;
+ (void)logDictationString:(id)arg1;
+ (void)didBeginEditingInTextView:(id)arg1;
+ (id)attributedStringForDictationResult:(id)arg1 andCorrectionIdentifier:(id)arg2;
+ (bool)takesPhysicalButtonsEnded:(id)arg1 forTextView:(id)arg2;
+ (bool)takesPhysicalButtonsBegan:(id)arg1 forTextView:(id)arg2;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2 fromKeyboard:(bool)arg3 options:(id)arg4;
+ (id)streamingHypothesisForPhrases:(id)arg1;
+ (bool)starkScreenExists;
+ (id)serializedDictationPhrases:(id)arg1 fromKeyboard:(bool)arg2 transform:(struct __CFString { }*)arg3;
+ (id)interpretation:(id)arg1 forPhraseIndex:(unsigned long long)arg2 isShiftLocked:(bool)arg3 autocapitalizationType:(long long)arg4;
+ (id)serializedDictationPhrasesFromTokenMatrix:(id)arg1 fromKeyboard:(bool)arg2 transform:(struct __CFString { }*)arg3;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2 ranges:(id*)arg3 options:(id)arg4;
+ (bool)usingTypeAndTalk;
+ (bool)isTextViewOnStarkScreen:(id)arg1;
+ (void)logCorrectionStatisticsForDelegate:(id)arg1;
+ (void)enableGestureHandlerIfNecessary;
+ (id)activeConnection;
+ (void)disableGestureHandler;
+ (bool)shouldEnableGestureHandler;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2;
+ (id)serializedInterpretationFromTokens:(id)arg1 transform:(struct __CFString { }*)arg2 ranges:(id*)arg3;
+ (void)siriPreferencesChanged;
+ (void)applicationWillResignActive;
+ (void)applicationDidBecomeActive;
+ (void)applicationDidChangeStatusBarFrame;
+ (bool)setupForPhraseSerialization;
+ (bool)setupForOpeningConnections;
+ (bool)openAssistantFrameworkIfNecessary;
+ (void)poppedLastStreamingOperation;
+ (void)keyboardDidUpdateOnScreenStatus;
+ (bool)shouldHideSelectionUIForTextView:(id)arg1;
+ (void)updateLandingView;
+ (bool)shouldHideCursorForTextView:(id)arg1;
+ (void)didOneFingerTapInTextView:(id)arg1;
+ (double)serverManualEndpointingThreshold;
+ (bool)usingServerManualEndpointingThreshold;
+ (int)viewMode;
+ (bool)isRunning;
+ (bool)dictationIsFunctional;
+ (id)stringForState:(int)arg1;
+ (bool)fetchCurrentInputModeSupportsDictation;
+ (id)singleLineResultForResult:(id)arg1;
+ (bool)shouldInsertText:(id)arg1 inInputDelegate:(id)arg2;
+ (bool)shouldDeleteBackwardInInputDelegate:(id)arg1;
+ (void)keyboardWillChangeFromDelegate:(id)arg1 toDelegate:(id)arg2;
+ (void)keyboardDidSetInputMode;
+ (id)bestInterpretationForDictationResult:(id)arg1;
+ (id)metadataDictionaryForCorrectionIdentifier:(id)arg1;
+ (id)serializedDictationPhrases:(id)arg1;
+ (id)activeInstance;
+ (id)sharedInstance;

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })insertionRange;
- (void)preheatIfNecessary;
- (void)dictationConnnectionDidChangeAvailability:(id)arg1;
- (void)dictationConnection:(id)arg1 speechRecognitionDidFail:(id)arg2;
- (void)dictationConnection:(id)arg1 speechRecordingDidFail:(id)arg2;
- (void)dictationConnectionSpeechRecordingDidCancel:(id)arg1;
- (void)dictationConnectionSpeechRecordingDidEnd:(id)arg1;
- (void)dictationConnectionSpeechRecordingDidBegin:(id)arg1;
- (void)dictationConnectionSpeechRecordingWillBegin:(id)arg1;
- (void)dictationConnection:(id)arg1 didRecognizeTokens:(id)arg2 languageModel:(id)arg3;
- (void)dictationConnection:(id)arg1 didHypothesizePhrases:(id)arg2 languageModel:(id)arg3;
- (void)dictationConnection:(id)arg1 didRecognizePhrases:(id)arg2 languageModel:(id)arg3 correctionIdentifier:(id)arg4;
- (void)restartDictationForTypeAndTalk;
- (void)switchToDictationInputMode;
- (void)dismissDictationView:(id)arg1;
- (void)errorAnimationDidFinish;
- (float)audioLevel;
- (void)setHasPreheated:(bool)arg1;
- (bool)hasPreheated;
- (void)setupToInsertResultForNewHypothesis:(id)arg1;
- (id)previousHypothesis;
- (bool)discardNextHypothesis;
- (void)_startStreamingAnimations;
- (id)_rangeByExtendingRange:(id)arg1 by:(long long)arg2 inputDelegate:(id)arg3;
- (id)_hypothesisRangeFromSelectionRange:(id)arg1 inputDelegate:(id)arg2;
- (void)performIgnoringDocumentChanges:(id)arg1;
- (id)pendingEdits;
- (void)_displayLinkFired:(id)arg1;
- (void)finishDictationRecognitionWithPhrases:(id)arg1 languageModel:(id)arg2 correctionIdentifier:(id)arg3;
- (void)insertSerializedDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)resultWithTrailingSpace:(id)arg1;
- (struct __CFString { }*)resultTransformForLanguageModel:(id)arg1;
- (bool)needsLeadingSpaceForPhrases:(id)arg1;
- (bool)needsTrailingSpaceForPhrases:(id)arg1;
- (id)dictationPhraseArrayFromDictationResult:(id)arg1;
- (void)_finalizeDictationText;
- (void)_stopStreamingAnimation;
- (void)_updateFromSelectedTextRange:(id)arg1 withNewHypothesis:(id)arg2;
- (id)targetHypothesis;
- (id)lastHypothesis;
- (void)startConnectionForReason:(long long)arg1;
- (void)setupForStreamingDictationStart;
- (void)startRecordingLimitTimer;
- (void)setLanguage:(id)arg1;
- (id)languageCodeForAssistantLanguageCode:(id)arg1;
- (void)setInsertionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setPreviousHypothesis:(id)arg1;
- (void)cancelRecordingLimitTimer;
- (void)setPendingEdits:(id)arg1;
- (void)setLastHypothesis:(id)arg1;
- (void)setTargetHypothesis:(id)arg1;
- (bool)isRecievingResults;
- (void)releaseConnectionAfterDictationRequest;
- (void)endSessionIfNecessaryForTransitionFromState:(int)arg1 toState:(int)arg2;
- (void)completeStartConnectionForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2;
- (void)completeStartConnectionForReason:(long long)arg1;
- (void)setupForDictationStartForReason:(long long)arg1;
- (void)setupConnectionOptions;
- (id)selectedTextForInputDelegate:(id)arg1;
- (id)postfixTextForInputDelegate:(id)arg1;
- (id)prefixTextForInputDelegate:(id)arg1;
- (id)fieldIdentifierInputDelegate:(id)arg1;
- (id)supportedDictationLanguages:(id)arg1;
- (bool)wasDisabledDueToTelephonyActivity;
- (bool)_shouldInsertText:(id)arg1 inInputDelegate:(id)arg2;
- (bool)_shouldDeleteBackwardInInputDelegate:(id)arg1;
- (void)setDiscardNextHypothesis:(bool)arg1;
- (void)_restartDictation;
- (bool)performingStreamingEditingOperation;
- (void)releaseConnection;
- (id)streamingOperations;
- (void)enableProximity;
- (void)setDictationInputmode;
- (void)setDictationStartedFromGesture:(bool)arg1;
- (void)startDictationForReason:(long long)arg1;
- (bool)dictationStartedFromGesture;
- (void)reenableAutorotation;
- (void)setInputModeThatInvokedDictation:(id)arg1;
- (void)disableAutorotation;
- (void)releaseConnectionAfterStatisticsLogging;
- (id)connectionForStatisticsLogging;
- (id)assistantCompatibleLanguageCodeForInputMode:(id)arg1;
- (bool)dictationEnabled;
- (id)language;
- (bool)disabledDueToTelephonyActivity;
- (void)delayedTelephonyCheckingSetup;
- (void)setPerformingStreamingEditingOperation:(bool)arg1;
- (id)inputModeThatInvokedDictation;
- (void)startConnectionForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2;
- (void)startDictationForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2;
- (bool)supportsInputMode:(id)arg1 error:(id*)arg2;
- (id)_connection;
- (id)connection;
- (void)startDictation;
- (void)stopDictation;
- (void)switchToDictationInputModeWithTouch:(id)arg1;
- (void)_touchPhaseChangedForTouch:(id)arg1;
- (void)cancelDictation;
- (void)setState:(int)arg1;
- (void)proximityStateChanged:(id)arg1;
- (int)state;
- (id)init;
- (void)dealloc;

@end

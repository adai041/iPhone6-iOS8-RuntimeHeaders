/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIView, NSString, NSArray, UIImage, CALayer, NSMutableDictionary, _UIInputViewContent, UIKBRenderConfig;

@interface UIInputView : UIView <UISplittableInputView> {
    long long _style;
    UIKBRenderConfig *_renderConfig;
    bool_suppressBackgroundStyling;
    bool_disableSplitSupport;
    _UIInputViewContent *_leftContentView;
    _UIInputViewContent *_rightContentView;
    double _contentRatio;
    struct CGSize { 
        double width; 
        double height; 
    } _leftContentSize;
    struct CGSize { 
        double width; 
        double height; 
    } _rightContentSize;
    struct CGSize { 
        double width; 
        double height; 
    } _defaultSize;
    double _gapWidth;
    double _leftOffset;
    bool_isTransitioning;
    double _transitionGap;
    double _transitionLeftOffset;
    double _transitionRatio;
    UIImage *_mergedImage;
    UIImage *_splitImage;
    NSMutableDictionary *_mergedSliceMap;
    NSMutableDictionary *_splitSliceMap;
    NSArray *_visibleLayers;
    CALayer *_transitionLayer;
}

@property(readonly) long long inputViewStyle;
@property(readonly) UIView * leftContentView;
@property(readonly) UIView * rightContentView;
@property double contentRatio;
@property struct CGSize { double x1; double x2; } leftContentViewSize;
@property struct CGSize { double x1; double x2; } rightContentViewSize;
@property(retain) UIImage * _mergedImage;
@property(retain) UIImage * _splitImage;
@property(retain) NSMutableDictionary * _mergedSliceMap;
@property(retain) NSMutableDictionary * _splitSliceMap;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (void)_setupAppearanceIfNecessary;

- (void)set_splitSliceMap:(id)arg1;
- (id)_splitSliceMap;
- (void)set_mergedSliceMap:(id)arg1;
- (id)_mergedSliceMap;
- (void)set_splitImage:(id)arg1;
- (id)_splitImage;
- (void)set_mergedImage:(id)arg1;
- (id)_mergedImage;
- (void)setRightContentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLeftContentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setInputViewStyle:(long long)arg1;
- (bool)_disableSplitSupport;
- (void)_setSuppressBackgroundStyling:(bool)arg1;
- (bool)_suppressBackgroundStyling;
- (id)_toolbarBorderedBackground;
- (id)_splitBorderedBackgroundWithCorners:(unsigned long long)arg1;
- (void)_updateWithSize:(struct CGSize { double x1; double x2; })arg1;
- (double)contentRatio;
- (long long)inputViewStyle;
- (double)_additionalClipHeight;
- (void)_setNeedsContentSizeUpdate;
- (void)_setDisableSplitSupport:(bool)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inputViewStyle:(long long)arg2;
- (id)rightContentView;
- (id)leftContentView;
- (void)setContentRatio:(double)arg1;
- (void)_setProgress:(double)arg1 boundedBy:(double)arg2;
- (bool)_isToolbars;
- (void)_setLeftOffset:(double)arg1 gapWidth:(double)arg2;
- (void)didEndSplitTransition;
- (void)willBeginSplitTransition;
- (void)updateSplitSubviewContraintsWithLeftContentSize:(struct CGSize { double x1; double x2; })arg1 rightContentSize:(struct CGSize { double x1; double x2; })arg2;
- (void)layoutSplitSubviewsWithLeftContentSize:(struct CGSize { double x1; double x2; })arg1 rightContentSize:(struct CGSize { double x1; double x2; })arg2;
- (void)updateMergedSubviewConstraints;
- (void)layoutMergedSubviews;
- (bool)_supportsSplit;
- (struct CGSize { double x1; double x2; })_defaultSize;
- (struct CGSize { double x1; double x2; })rightContentViewSize;
- (struct CGSize { double x1; double x2; })leftContentViewSize;
- (void)_updateClipCorners;
- (bool)_isSplit;
- (void)_endSplitTransitionIfNeeded:(bool)arg1;
- (void)_beginSplitTransitionIfNeeded:(double)arg1 gapWidth:(double)arg2;
- (int)_clipCornersOfView:(id)arg1;
- (id)_inheritedRenderConfig;
- (void)_setRenderConfig:(id)arg1;
- (void)_updateBackgroundColor;
- (id)tintColor;
- (bool)_isTransitioning;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end

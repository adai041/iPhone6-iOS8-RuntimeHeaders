/* Generated by RuntimeBrowser.
   Image: /System/Library/Frameworks/CoreText.framework/CoreText
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSArray, NSMutableArray;

@interface _CTFontFallbacksArray : NSArray  {
    int _lock;
    const struct TBaseFont { int (**x1)(); int x2; struct TCFRef<const __CFData *> { struct __CFData {} *x_3_1_1; } x3; struct TCFRef<const __CFData *> { struct __CFData {} *x_4_1_1; } x4; struct TCFRef<const __CFData *> { struct __CFData {} *x_5_1_1; } x5; struct TCFRef<const __CFData *> { struct __CFData {} *x_6_1_1; } x6; struct TCFRef<const __CFData *> { struct __CFData {} *x_7_1_1; } x7; struct TCFRef<const __CFData *> { struct __CFData {} *x_8_1_1; } x8; struct TCFRef<const __CFData *> { struct __CFData {} *x_9_1_1; } x9; struct TCFRef<const __CFData *> { struct __CFData {} *x_10_1_1; } x10; struct TCFRef<const __CFURL *> { struct __CFURL {} *x_11_1_1; } x11; int x12; struct TCFRef<__CFDictionary *> { struct __CFDictionary {} *x_13_1_1; } x13; struct TCFRef<const __CFArray *> { struct __CFArray {} *x_14_1_1; } x14; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_15_1_1; } x15; struct TCFRef<const __CFArray *> { struct __CFArray {} *x_16_1_1; } x16; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_17_1_1; } x17; unsigned int x18; unsigned int x19; unsigned int x20; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_21_1_1; } x21; struct TCFRef<const __CFData *> { struct __CFData {} *x_22_1_1; } x22; long long x23; struct TBMPDataCache {} *x24; struct unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > {} *x25; struct TTraitsValues {} *x26; struct UnscaledAdvancesPage {} *x27; struct StrikeMetrics { double x_28_1_1; double x_28_1_2; double x_28_1_3; unsigned int x_28_1_4; struct CGPoint { double x_5_2_1; double x_5_2_2; } x_28_1_5; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_6_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_6_2_2; } x_28_1_6; boolx_28_1_7; } x28; unsigned int x29; unsigned int x30; unsigned int x31; struct TMutex { id x_32_1_1; } x32; struct TInlineVector<TCFRef<const __CFData *>, 4> { struct TCFRef<const __CFData *> {} *x_33_1_1; struct TCFRef<const __CFData *> {} *x_33_1_2; struct __compressed_pair<TCFRef<const __CFData *> *, TInlineBufferAllocator<TCFRef<const __CFData *>, 4> > { struct TCFRef<const __CFData *> {} *x_3_2_1; struct TInlineBufferAllocator<TCFRef<const __CFData *>, 4> { struct type { unsigned char x_1_4_1[32]; } x_2_3_1; struct TCFRef<const __CFData *> {} *x_2_3_2; } x_3_2_2; } x_33_1_3; } x33; struct array<TCFRef<__CFDictionary *>, 7> { struct TCFRef<__CFDictionary *> { struct __CFDictionary {} *x_1_2_1; } x_34_1_1[7]; } x34; } *_baseFont;
    unsigned long long _count;
    NSArray *_cascade;
    NSMutableArray *_fallbacks;
}


- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)dealloc;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x1; id *x2; unsigned long long *x3; unsigned long long x4[5]; }*)arg1 objects:(id*)arg2 count:(unsigned long long)arg3;
- (id)initWithBaseFont:(const struct TBaseFont { int (**x1)(); int x2; struct TCFRef<const __CFData *> { struct __CFData {} *x_3_1_1; } x3; struct TCFRef<const __CFData *> { struct __CFData {} *x_4_1_1; } x4; struct TCFRef<const __CFData *> { struct __CFData {} *x_5_1_1; } x5; struct TCFRef<const __CFData *> { struct __CFData {} *x_6_1_1; } x6; struct TCFRef<const __CFData *> { struct __CFData {} *x_7_1_1; } x7; struct TCFRef<const __CFData *> { struct __CFData {} *x_8_1_1; } x8; struct TCFRef<const __CFData *> { struct __CFData {} *x_9_1_1; } x9; struct TCFRef<const __CFData *> { struct __CFData {} *x_10_1_1; } x10; struct TCFRef<const __CFURL *> { struct __CFURL {} *x_11_1_1; } x11; int x12; struct TCFRef<__CFDictionary *> { struct __CFDictionary {} *x_13_1_1; } x13; struct TCFRef<const __CFArray *> { struct __CFArray {} *x_14_1_1; } x14; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_15_1_1; } x15; struct TCFRef<const __CFArray *> { struct __CFArray {} *x_16_1_1; } x16; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_17_1_1; } x17; unsigned int x18; unsigned int x19; unsigned int x20; struct TCFRef<const __CFCharacterSet *> { struct __CFCharacterSet {} *x_21_1_1; } x21; struct TCFRef<const __CFData *> { struct __CFData {} *x_22_1_1; } x22; long long x23; struct TBMPDataCache {} *x24; struct unordered_map<unsigned short, unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, unsigned short> > > {} *x25; struct TTraitsValues {} *x26; struct UnscaledAdvancesPage {} *x27; struct StrikeMetrics { double x_28_1_1; double x_28_1_2; double x_28_1_3; unsigned int x_28_1_4; struct CGPoint { double x_5_2_1; double x_5_2_2; } x_28_1_5; struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_6_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_6_2_2; } x_28_1_6; boolx_28_1_7; } x28; unsigned int x29; unsigned int x30; unsigned int x31; struct TMutex { id x_32_1_1; } x32; struct TInlineVector<TCFRef<const __CFData *>, 4> { struct TCFRef<const __CFData *> {} *x_33_1_1; struct TCFRef<const __CFData *> {} *x_33_1_2; struct __compressed_pair<TCFRef<const __CFData *> *, TInlineBufferAllocator<TCFRef<const __CFData *>, 4> > { struct TCFRef<const __CFData *> {} *x_3_2_1; struct TInlineBufferAllocator<TCFRef<const __CFData *>, 4> { struct type { unsigned char x_1_4_1[32]; } x_2_3_1; struct TCFRef<const __CFData *> {} *x_2_3_2; } x_3_2_2; } x_33_1_3; } x33; struct array<TCFRef<__CFDictionary *>, 7> { struct TCFRef<__CFDictionary *> { struct __CFDictionary {} *x_1_2_1; } x_34_1_1[7]; } x34; }*)arg1 cascade:(id)arg2;

@end
